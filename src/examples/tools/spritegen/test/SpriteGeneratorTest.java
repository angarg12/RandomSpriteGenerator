package examples.tools.spritegen.test;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

import examples.tools.spritegen.SpriteGenerator;
import examples.tools.spritegen.Sprite;
import examples.tools.spritegen.SpriteGeneratorBuilder;

public class SpriteGeneratorTest {	
	SpriteGenerator generator1;
	int[] colorTable1;
	Sprite baseSprite1;
	Sprite animatedSprite1;
	Sprite animatedSprite2;
	
	@Before
	public void setUp() throws Exception {
		colorTable1 = new int[]{
				0x010101, 0x010101, 0x010101, // trans
				0x000000, 0x000000, 0x000000,     // outline
				0xC0A080, 0x806040, 0x503010,     // col2
				0xFF7070, 0xD04040, 0xB02020,     // col1
				0xFFE020, 0xFFB000, 0xF0A000,     // col3
				0xFFFFFF, 0xB0B0B0, 0x808080,     // highlight
				};
		SpriteGeneratorBuilder builder = new SpriteGeneratorBuilder();
		
		builder.colorTable(colorTable1).
			fillTable(new int[][] {
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0 },
					{ 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0 },
					{ 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0 },
					{ 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0 },
					{ 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0 },
					{ 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0 },
					{ 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0 },
					{ 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0 },
					{ 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0 },
					{ 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }}).
			animationTable(new int[][][] {
				      { { 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
						{ 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
						{ 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
						{ 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
						{ 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
						{ 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
						{ 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
						{ 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
						{ 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0 },
						{ 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0 },
						{ 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0 },
						{ 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0 }},
				      { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5 },
						{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5 },
						{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5 },
						{ 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5 },
						{ 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5 },
						{ 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5 },
						{ 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5 },
						{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5 },
						{ 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 },
						{ 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 },
						{ 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 },
						{ 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 }}}).
			flipHorizontal(true).
			flipVertical(false).
			shadeAtFlipHorizontal(0).
			shadeAtFlipVertical(0).
			fillProbability(0.6).
			fillSmoothing(0.2).
			fillSmoothingHorizontalBias(0.5).
			blackProbability(0.3).
			highlightProbability(0.4).
			colorSmoothing(0.3).
			colorSmoothingHorizontalBias(0.5);
		generator1 = builder.build();
		initializeSprites();
	}
	
	public void initializeSprites() throws Exception {
		baseSprite1 = new Sprite(colorTable1, generator1, 0, 0, 0, 0);
		baseSprite1.colidx = new int[][]{{0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0}};
		baseSprite1.hull = new int[][]{{0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,10,0,0,10,0,10,10,10,10,0},
				{0,0,0,0,0,10,0,0,0,10,10,0},
				{0,0,10,0,0,0,0,0,0,10,10,0},
				{0,0,10,10,0,0,10,0,10,0,0,0},
				{0,10,0,10,0,0,10,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0}};
		baseSprite1.pixels = new int[][]{{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793}};
		animatedSprite1 = new Sprite(colorTable1, generator1, 0, 0, 0, 0);
		animatedSprite1.colidx = new int[][]{{0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,15,0,0,12,0,12,12,15,6,0},
				{0,0,0,0,0,12,0,0,0,15,8,0},
				{0,0,9,0,0,0,0,0,0,6,17,0},
				{0,0,12,12,0,0,6,0,15,0,0,0},
				{0,9,0,12,0,0,6,0,0,0,0,0},
				{0,9,0,12,0,0,6,0,0,0,0,0},
				{0,0,15,14,0,0,6,0,15,0,0,0},
				{0,0,9,0,0,0,0,0,0,15,15,0},
				{0,0,0,0,0,12,0,0,0,15,8,0},
				{0,0,15,0,0,12,0,12,12,17,8,0},
				{0,0,0,0,0,0,0,0,0,0,0,0}};
		animatedSprite1.hull = new int[][]{{0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,10,0,0,10,0,10,10,10,10,0},
				{0,0,0,0,0,10,0,0,0,10,10,0},
				{0,0,10,0,0,0,0,0,0,10,10,0},
				{0,0,10,10,0,0,10,0,10,0,0,0},
				{0,10,0,10,0,0,10,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0}};
		animatedSprite1.pixels = new int[][]{{65793,65793,0,65793,65793,0,65793,0,0,0,0,65793},
				{65793,0,16777215,0,0,16769056,0,16769056,16769056,16777215,12624000,0},
				{65793,65793,0,65793,0,16769056,0,0,0,16777215,5255184,0},
				{65793,0,16740464,0,65793,0,0,65793,0,12624000,8421504,0},
				{65793,0,16769056,16769056,0,0,12624000,0,16777215,0,0,65793},
				{0,16740464,0,16769056,0,0,12624000,0,0,65793,65793,65793},
				{0,16740464,0,16769056,0,0,12624000,0,0,65793,65793,65793},
				{65793,0,16777215,15769600,0,0,12624000,0,16777215,0,0,65793},
				{65793,0,16740464,0,65793,0,0,65793,0,16777215,16777215,0},
				{65793,65793,0,65793,0,16769056,0,0,0,16777215,5255184,0},
				{65793,0,16777215,0,0,16769056,0,16769056,16769056,8421504,5255184,0},
				{65793,65793,0,65793,65793,0,65793,0,0,0,0,65793},
				{65793,65793,65793,0,65793,65793,0,0,0,0,65793,65793},
				{65793,65793,0,16777215,0,0,16769056,16769056,16777215,12624000,0,65793},
				{65793,65793,0,0,65793,0,16769056,0,16777215,5255184,0,65793},
				{65793,0,16740464,0,65793,65793,0,0,12624000,8421504,0,65793},
				{65793,0,16769056,16769056,0,0,12624000,16777215,0,0,65793,65793},
				{0,16740464,0,16769056,0,0,12624000,0,65793,65793,65793,65793},
				{0,16740464,0,16769056,0,0,12624000,0,0,65793,65793,65793},
				{65793,0,16777215,15769600,0,0,12624000,0,16777215,0,0,65793},
				{65793,0,16740464,0,65793,0,0,65793,0,16777215,16777215,0},
				{65793,65793,0,65793,0,16769056,0,0,0,16777215,5255184,0},
				{65793,0,16777215,0,0,16769056,0,16769056,16769056,8421504,5255184,0},
				{65793,65793,0,65793,65793,0,65793,0,0,0,0,65793},
				{65793,65793,0,65793,65793,0,65793,0,0,0,0,65793},
				{65793,0,16777215,0,0,16769056,0,16769056,16769056,16777215,12624000,0},
				{65793,65793,0,65793,0,16769056,0,0,0,16777215,5255184,0},
				{65793,0,16740464,0,65793,0,0,65793,0,12624000,8421504,0},
				{65793,0,16769056,16769056,0,0,12624000,0,16777215,0,0,65793},
				{0,16740464,0,16769056,0,0,12624000,0,0,65793,65793,65793},
				{0,16740464,0,16769056,0,0,12624000,0,65793,65793,65793,65793},
				{65793,0,16777215,15769600,0,0,12624000,16777215,0,0,65793,65793},
				{65793,0,16740464,0,65793,65793,0,0,16777215,16777215,0,65793},
				{65793,65793,0,0,65793,0,16769056,0,16777215,5255184,0,65793},
				{65793,65793,0,16777215,0,0,16769056,16769056,8421504,5255184,0,65793},
				{65793,65793,65793,0,65793,65793,0,0,0,0,65793,65793}};
		animatedSprite2 = new Sprite(colorTable1, generator1, 0, 0, 0, 0);
		animatedSprite2.colidx = new int[][]{{0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,12,0,0,15,0,15,6,6,6,0},
				{0,0,0,0,0,12,0,0,0,6,6,0},
				{0,0,9,0,0,0,0,0,0,12,6,0},
				{0,0,15,6,0,0,15,0,12,0,0,0},
				{0,6,0,15,0,0,15,0,0,0,0,0},
				{0,6,0,15,0,0,15,0,0,0,0,0},
				{0,0,15,6,0,0,15,0,12,0,0,0},
				{0,0,9,0,0,0,0,0,0,12,6,0},
				{0,0,0,0,0,12,0,0,0,6,6,0},
				{0,0,12,0,0,15,0,15,6,6,6,0},
				{0,0,0,0,0,0,0,0,0,0,0,0}};
		animatedSprite2.hull = new int[][]{{0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,10,0,0,10,0,10,10,10,10,0},
				{0,0,0,0,0,10,0,0,0,10,10,0},
				{0,0,10,0,0,0,0,0,0,10,10,0},
				{0,0,10,10,0,0,10,0,10,0,0,0},
				{0,10,0,10,0,0,10,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0}};
		animatedSprite2.pixels = new int[][]{{65793,65793,0,65793,65793,0,65793,0,0,0,0,65793},
				{65793,0,16769056,0,0,16777215,0,16777215,12624000,12624000,12624000,0},
				{65793,65793,0,65793,0,16769056,0,0,0,12624000,12624000,0},
				{65793,0,16740464,0,65793,0,0,65793,0,16769056,12624000,0},
				{65793,0,16777215,12624000,0,0,16777215,0,16769056,0,0,65793},
				{0,12624000,0,16777215,0,0,16777215,0,0,65793,65793,65793},
				{0,12624000,0,16777215,0,0,16777215,0,0,65793,65793,65793},
				{65793,0,16777215,12624000,0,0,16777215,0,16769056,0,0,65793},
				{65793,0,16740464,0,65793,0,0,65793,0,16769056,12624000,0},
				{65793,65793,0,65793,0,16769056,0,0,0,12624000,12624000,0},
				{65793,0,16769056,0,0,16777215,0,16777215,12624000,12624000,12624000,0},
				{65793,65793,0,65793,65793,0,65793,0,0,0,0,65793},
				{65793,65793,65793,0,65793,65793,0,0,0,0,65793,65793},
				{65793,65793,0,16769056,0,0,16777215,12624000,12624000,12624000,0,65793},
				{65793,65793,0,0,65793,0,16769056,0,12624000,12624000,0,65793},
				{65793,0,16740464,0,65793,65793,0,0,16769056,12624000,0,65793},
				{65793,0,16777215,12624000,0,0,16777215,16769056,0,0,65793,65793},
				{0,12624000,0,16777215,0,0,16777215,0,65793,65793,65793,65793},
				{0,12624000,0,16777215,0,0,16777215,0,0,65793,65793,65793},
				{65793,0,16777215,12624000,0,0,16777215,0,16769056,0,0,65793},
				{65793,0,16740464,0,65793,0,0,65793,0,16769056,12624000,0},
				{65793,65793,0,65793,0,16769056,0,0,0,12624000,12624000,0},
				{65793,0,16769056,0,0,16777215,0,16777215,12624000,12624000,12624000,0},
				{65793,65793,0,65793,65793,0,65793,0,0,0,0,65793},
				{65793,65793,0,65793,65793,0,65793,0,0,0,0,65793},
				{65793,0,16769056,0,0,16777215,0,16777215,12624000,12624000,12624000,0},
				{65793,65793,0,65793,0,16769056,0,0,0,12624000,12624000,0},
				{65793,0,16740464,0,65793,0,0,65793,0,16769056,12624000,0},
				{65793,0,16777215,12624000,0,0,16777215,0,16769056,0,0,65793},
				{0,12624000,0,16777215,0,0,16777215,0,0,65793,65793,65793},
				{0,12624000,0,16777215,0,0,16777215,0,65793,65793,65793,65793},
				{65793,0,16777215,12624000,0,0,16777215,16769056,0,0,65793,65793},
				{65793,0,16740464,0,65793,65793,0,0,16769056,12624000,0,65793},
				{65793,65793,0,0,65793,0,16769056,0,12624000,12624000,0,65793},
				{65793,65793,0,16769056,0,0,16777215,12624000,12624000,12624000,0,65793},
				{65793,65793,65793,0,65793,65793,0,0,0,0,65793,65793}};
	}
	
	@Test
	public void test() throws Exception {
		spriteFunctionsTest(generator1,baseSprite1);
		createSpriteTest(generator1);
		//mergeSpriteTest(generator1,animatedSprite1,0.8);
	}
	
	private void createSpriteTest(SpriteGenerator gen) throws Exception {
		SpriteGenerator.fixRandom(1000);
		Sprite spr = gen.createSprite();
		assertArrayEquals("Created sprite does not match the expected.", getCreateSpriteTable(gen), spr.pixels);
	}
	
	
	private void mergeSpriteTest(SpriteGenerator gen, Sprite spr1, double weight) throws Exception {
		SpriteGenerator.fixRandom(1000);
		Sprite spr = gen.mutateHull(spr1, weight);
		assertArrayEquals("Merged sprite does not match the expected.", getMergeSpriteTable(gen, spr1, weight), spr.pixels);
	}
	
	
	//mergeSprites
	// need their own function
	private void spriteFunctionsTest(SpriteGenerator gen, Sprite spr) throws Exception {
		colorize(gen,spr);
		flipAndShade(gen,spr);
		bevelShadeNew(gen,spr);
		gouraudShade(gen,spr);
		indexToRGB(gen,spr);
		animate(gen,spr);
		addOutlineRGB(gen,spr);
	}

	private void colorize(SpriteGenerator gen, Sprite spr) throws Exception {
		Sprite clone = new Sprite(spr);
		SpriteGenerator.fixRandom(1000);
		gen.colorize(clone);
		assertArrayEquals("Colorized sprite does not match the expected.", getColorizeTable(gen, spr), clone.colidx);
	}
	
	private void flipAndShade(SpriteGenerator gen, Sprite spr) throws Exception {
		Sprite clone = new Sprite(spr);
		SpriteGenerator.fixRandom(1000);
		gen.colorize(clone);
		SpriteGenerator.fixRandom(1000);
		gen.flip(clone);
		assertArrayEquals("Flipped sprite does not match the expected.", getFlipTable(gen, spr), clone.colidx);
	}
	
	private void bevelShadeNew(SpriteGenerator gen, Sprite spr) throws Exception {
		Sprite clone = new Sprite(spr);
		SpriteGenerator.fixRandom(1000);
		gen.colorize(clone);
		SpriteGenerator.fixRandom(1000);
		gen.flip(clone);
		SpriteGenerator.fixRandom(1000);
		gen.bevelShade(clone);
		assertArrayEquals("Bevel shaded sprite does not match the expected.", getBevelShadeTable(gen, spr), clone.colidx);
	}

	private void gouraudShade(SpriteGenerator gen, Sprite spr) throws Exception {
		Sprite clone = new Sprite(spr);
		SpriteGenerator.fixRandom(1000);
		gen.colorize(clone);
		SpriteGenerator.fixRandom(1000);
		gen.flip(clone);
		SpriteGenerator.fixRandom(1000);
		gen.gouraudShade(clone);
		assertArrayEquals("Gouraud shaded sprite does not match the expected.", getGouraudShadeTable(gen, spr), clone.colidx);
	}

	private void indexToRGB(SpriteGenerator gen, Sprite spr) throws Exception {
		Sprite clone = new Sprite(spr);
		SpriteGenerator.fixRandom(1000);
		gen.colorize(clone);
		SpriteGenerator.fixRandom(1000);
		gen.flip(clone);
		SpriteGenerator.fixRandom(1000);
		gen.bevelShade(clone);
		SpriteGenerator.fixRandom(1000);
		gen.indexToRGB(clone);
		assertArrayEquals("Colored sprite does not match the expected.", getIndexToRGBTable(gen, spr), clone.pixels);
	}

	private void animate(SpriteGenerator gen, Sprite spr) throws Exception {
		Sprite clone = new Sprite(spr);
		SpriteGenerator.fixRandom(1000);
		gen.colorize(clone);
		SpriteGenerator.fixRandom(1000);
		gen.flip(clone);
		SpriteGenerator.fixRandom(1000);
		gen.bevelShade(clone);
		SpriteGenerator.fixRandom(1000);
		gen.indexToRGB(clone);
		SpriteGenerator.fixRandom(1000);
		gen.animate(clone);
		assertArrayEquals("Animated sprite does not match the expected.", getAnimateTable(gen, spr), clone.pixels);
	}

	private void addOutlineRGB(SpriteGenerator gen, Sprite spr) throws Exception {
		Sprite clone = new Sprite(spr);
		SpriteGenerator.fixRandom(1000);
		gen.colorize(clone);
		SpriteGenerator.fixRandom(1000);
		gen.flip(clone);
		SpriteGenerator.fixRandom(1000);
		gen.bevelShade(clone);
		SpriteGenerator.fixRandom(1000);
		gen.indexToRGB(clone);
		SpriteGenerator.fixRandom(1000);
		gen.animate(clone);
		gen.addOutline(clone);
		assertArrayEquals("Outline sprite does not match the expected.", getAddOutlineRGBTable(gen, spr), clone.pixels);
	}
	
	private int[][] getColorizeTable(SpriteGenerator gen, 
			Sprite spr) throws Exception { 
		if(gen == generator1 && spr == baseSprite1){
			return new int[][]{{0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,15,0,0,12,0,12,12,15,6,0},
					{0,0,0,0,0,12,0,0,0,6,6,0},
					{0,0,9,0,0,0,0,0,0,6,15,0},
					{0,0,12,12,0,0,6,0,15,0,0,0},
					{0,9,0,12,0,0,6,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0}};
		}
		throw new Exception("Values not tabulated: "+gen+" "+spr);
	}
	
	private int[][] getFlipTable(SpriteGenerator gen, 
			Sprite spr) throws Exception { 
		if(gen == generator1 && spr == baseSprite1){
			return new int[][]{{0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,15,0,0,12,0,12,12,15,6,0},
					{0,0,0,0,0,12,0,0,0,6,6,0},
					{0,0,9,0,0,0,0,0,0,6,15,0},
					{0,0,12,12,0,0,6,0,15,0,0,0},
					{0,9,0,12,0,0,6,0,0,0,0,0},
					{0,9,0,12,0,0,6,0,0,0,0,0},
					{0,0,12,12,0,0,6,0,15,0,0,0},
					{0,0,9,0,0,0,0,0,0,6,15,0},
					{0,0,0,0,0,12,0,0,0,6,6,0},
					{0,0,15,0,0,12,0,12,12,15,6,0},
					{0,0,0,0,0,0,0,0,0,0,0,0}};
		}
		throw new Exception("Values not tabulated: "+gen+" "+spr);
	}
	
	private int[][] getBevelShadeTable(SpriteGenerator gen, 
			Sprite spr) throws Exception { 
		if(gen == generator1 && spr == baseSprite1){
			return new int[][]{{0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,15,0,0,12,0,12,12,15,6,0},
					{0,0,0,0,0,12,0,0,0,15,8,0},
					{0,0,9,0,0,0,0,0,0,6,17,0},
					{0,0,12,12,0,0,6,0,15,0,0,0},
					{0,9,0,12,0,0,6,0,0,0,0,0},
					{0,9,0,12,0,0,6,0,0,0,0,0},
					{0,0,15,14,0,0,6,0,15,0,0,0},
					{0,0,9,0,0,0,0,0,0,15,15,0},
					{0,0,0,0,0,12,0,0,0,15,8,0},
					{0,0,15,0,0,12,0,12,12,17,8,0},
					{0,0,0,0,0,0,0,0,0,0,0,0}};
		}
		throw new Exception("Values not tabulated: "+gen+" "+spr);
	}
	
	private int[][] getGouraudShadeTable(SpriteGenerator gen, 
			Sprite spr) throws Exception { 
		if(gen == generator1 && spr == baseSprite1){
			return new int[][]{{0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,15,0,0,14,0,14,14,17,8,0},
					{0,0,0,0,0,15,0,0,0,8,8,0},
					{0,0,15,0,0,0,0,0,0,8,17,0},
					{0,0,12,15,0,0,6,0,17,0,0,0},
					{0,9,0,12,0,0,15,0,0,0,0,0},
					{0,15,0,15,0,0,6,0,0,0,0,0},
					{0,0,15,12,0,0,15,0,15,0,0,0},
					{0,0,9,0,0,0,0,0,0,8,17,0},
					{0,0,0,0,0,14,0,0,0,8,8,0},
					{0,0,17,0,0,14,0,14,14,17,8,0},
					{0,0,0,0,0,0,0,0,0,0,0,0}};
		}
		throw new Exception("Values not tabulated: "+gen+" "+spr);
	}
	
	private int[][] getIndexToRGBTable(SpriteGenerator gen, 
			Sprite spr) throws Exception { 
		if(gen == generator1 && spr == baseSprite1){
			return new int[][]{{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,16777215,65793,65793,16769056,65793,16769056,16769056,16777215,12624000,65793},
					{65793,65793,65793,65793,65793,16769056,65793,65793,65793,16777215,5255184,65793},
					{65793,65793,16740464,65793,65793,65793,65793,65793,65793,12624000,8421504,65793},
					{65793,65793,16769056,16769056,65793,65793,12624000,65793,16777215,65793,65793,65793},
					{65793,16740464,65793,16769056,65793,65793,12624000,65793,65793,65793,65793,65793},
					{65793,16740464,65793,16769056,65793,65793,12624000,65793,65793,65793,65793,65793},
					{65793,65793,16777215,15769600,65793,65793,12624000,65793,16777215,65793,65793,65793},
					{65793,65793,16740464,65793,65793,65793,65793,65793,65793,16777215,16777215,65793},
					{65793,65793,65793,65793,65793,16769056,65793,65793,65793,16777215,5255184,65793},
					{65793,65793,16777215,65793,65793,16769056,65793,16769056,16769056,8421504,5255184,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793}};
		}
		throw new Exception("Values not tabulated: "+gen+" "+spr);
	}
	
	private int[][] getAnimateTable(SpriteGenerator gen, 
			Sprite spr) throws Exception { 
		if(gen == generator1 && spr == baseSprite1){
			return new int[][]{{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,16777215,65793,65793,16769056,65793,16769056,16769056,16777215,12624000,65793},
					{65793,65793,65793,65793,65793,16769056,65793,65793,65793,16777215,5255184,65793},
					{65793,65793,16740464,65793,65793,65793,65793,65793,65793,12624000,8421504,65793},
					{65793,65793,16769056,16769056,65793,65793,12624000,65793,16777215,65793,65793,65793},
					{65793,16740464,65793,16769056,65793,65793,12624000,65793,65793,65793,65793,65793},
					{65793,16740464,65793,16769056,65793,65793,12624000,65793,65793,65793,65793,65793},
					{65793,65793,16777215,15769600,65793,65793,12624000,65793,16777215,65793,65793,65793},
					{65793,65793,16740464,65793,65793,65793,65793,65793,65793,16777215,16777215,65793},
					{65793,65793,65793,65793,65793,16769056,65793,65793,65793,16777215,5255184,65793},
					{65793,65793,16777215,65793,65793,16769056,65793,16769056,16769056,8421504,5255184,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,16777215,65793,65793,16769056,16769056,16777215,12624000,65793,65793},
					{65793,65793,65793,65793,65793,65793,16769056,65793,16777215,5255184,65793,65793},
					{65793,65793,16740464,65793,65793,65793,65793,65793,12624000,8421504,65793,65793},
					{65793,65793,16769056,16769056,65793,65793,12624000,16777215,65793,65793,65793,65793},
					{65793,16740464,65793,16769056,65793,65793,12624000,65793,65793,65793,65793,65793},
					{65793,16740464,65793,16769056,65793,65793,12624000,65793,65793,65793,65793,65793},
					{65793,65793,16777215,15769600,65793,65793,12624000,65793,16777215,65793,65793,65793},
					{65793,65793,16740464,65793,65793,65793,65793,65793,65793,16777215,16777215,65793},
					{65793,65793,65793,65793,65793,16769056,65793,65793,65793,16777215,5255184,65793},
					{65793,65793,16777215,65793,65793,16769056,65793,16769056,16769056,8421504,5255184,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,16777215,65793,65793,16769056,65793,16769056,16769056,16777215,12624000,65793},
					{65793,65793,65793,65793,65793,16769056,65793,65793,65793,16777215,5255184,65793},
					{65793,65793,16740464,65793,65793,65793,65793,65793,65793,12624000,8421504,65793},
					{65793,65793,16769056,16769056,65793,65793,12624000,65793,16777215,65793,65793,65793},
					{65793,16740464,65793,16769056,65793,65793,12624000,65793,65793,65793,65793,65793},
					{65793,16740464,65793,16769056,65793,65793,12624000,65793,65793,65793,65793,65793},
					{65793,65793,16777215,15769600,65793,65793,12624000,16777215,65793,65793,65793,65793},
					{65793,65793,16740464,65793,65793,65793,65793,65793,16777215,16777215,65793,65793},
					{65793,65793,65793,65793,65793,65793,16769056,65793,16777215,5255184,65793,65793},
					{65793,65793,65793,16777215,65793,65793,16769056,16769056,8421504,5255184,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793}};
		}
		throw new Exception("Values not tabulated: "+gen+" "+spr);
	}
	
	private int[][] getAddOutlineRGBTable(SpriteGenerator gen, 
			Sprite spr) throws Exception { 
		if(gen == generator1 && spr == baseSprite1){
			return new int[][]{{65793,65793,0,65793,65793,0,65793,0,0,0,0,65793},
					{65793,0,16777215,0,0,16769056,0,16769056,16769056,16777215,12624000,0},
					{65793,65793,0,65793,0,16769056,0,0,0,16777215,5255184,0},
					{65793,0,16740464,0,65793,0,0,65793,0,12624000,8421504,0},
					{65793,0,16769056,16769056,0,0,12624000,0,16777215,0,0,65793},
					{0,16740464,0,16769056,0,0,12624000,0,0,65793,65793,65793},
					{0,16740464,0,16769056,0,0,12624000,0,0,65793,65793,65793},
					{65793,0,16777215,15769600,0,0,12624000,0,16777215,0,0,65793},
					{65793,0,16740464,0,65793,0,0,65793,0,16777215,16777215,0},
					{65793,65793,0,65793,0,16769056,0,0,0,16777215,5255184,0},
					{65793,0,16777215,0,0,16769056,0,16769056,16769056,8421504,5255184,0},
					{65793,65793,0,65793,65793,0,65793,0,0,0,0,65793},
					{65793,65793,65793,0,65793,65793,0,0,0,0,65793,65793},
					{65793,65793,0,16777215,0,0,16769056,16769056,16777215,12624000,0,65793},
					{65793,65793,0,0,65793,0,16769056,0,16777215,5255184,0,65793},
					{65793,0,16740464,0,65793,65793,0,0,12624000,8421504,0,65793},
					{65793,0,16769056,16769056,0,0,12624000,16777215,0,0,65793,65793},
					{0,16740464,0,16769056,0,0,12624000,0,65793,65793,65793,65793},
					{0,16740464,0,16769056,0,0,12624000,0,0,65793,65793,65793},
					{65793,0,16777215,15769600,0,0,12624000,0,16777215,0,0,65793},
					{65793,0,16740464,0,65793,0,0,65793,0,16777215,16777215,0},
					{65793,65793,0,65793,0,16769056,0,0,0,16777215,5255184,0},
					{65793,0,16777215,0,0,16769056,0,16769056,16769056,8421504,5255184,0},
					{65793,65793,0,65793,65793,0,65793,0,0,0,0,65793},
					{65793,65793,0,65793,65793,0,65793,0,0,0,0,65793},
					{65793,0,16777215,0,0,16769056,0,16769056,16769056,16777215,12624000,0},
					{65793,65793,0,65793,0,16769056,0,0,0,16777215,5255184,0},
					{65793,0,16740464,0,65793,0,0,65793,0,12624000,8421504,0},
					{65793,0,16769056,16769056,0,0,12624000,0,16777215,0,0,65793},
					{0,16740464,0,16769056,0,0,12624000,0,0,65793,65793,65793},
					{0,16740464,0,16769056,0,0,12624000,0,65793,65793,65793,65793},
					{65793,0,16777215,15769600,0,0,12624000,16777215,0,0,65793,65793},
					{65793,0,16740464,0,65793,65793,0,0,16777215,16777215,0,65793},
					{65793,65793,0,0,65793,0,16769056,0,16777215,5255184,0,65793},
					{65793,65793,0,16777215,0,0,16769056,16769056,8421504,5255184,0,65793},
					{65793,65793,65793,0,65793,65793,0,0,0,0,65793,65793}};
		}
		throw new Exception("Values not tabulated: "+gen+" "+spr);
	}
	
	private int[][] getCreateSpriteTable(SpriteGenerator gen) throws Exception { 
		if(gen == generator1){
			return new int[][]{{65793,65793,0,65793,65793,0,65793,0,0,0,0,65793},
					{65793,0,16769056,0,0,16777215,0,16777215,12624000,12624000,12624000,0},
					{65793,65793,0,65793,0,16769056,0,0,0,12624000,12624000,0},
					{65793,0,16740464,0,65793,0,0,65793,0,16769056,12624000,0},
					{65793,0,16777215,12624000,0,0,16777215,0,16769056,0,0,65793},
					{0,12624000,0,16777215,0,0,16777215,0,0,65793,65793,65793},
					{0,12624000,0,16777215,0,0,16777215,0,0,65793,65793,65793},
					{65793,0,16777215,12624000,0,0,16777215,0,16769056,0,0,65793},
					{65793,0,16740464,0,65793,0,0,65793,0,16769056,12624000,0},
					{65793,65793,0,65793,0,16769056,0,0,0,12624000,12624000,0},
					{65793,0,16769056,0,0,16777215,0,16777215,12624000,12624000,12624000,0},
					{65793,65793,0,65793,65793,0,65793,0,0,0,0,65793},
					{65793,65793,65793,0,65793,65793,0,0,0,0,65793,65793},
					{65793,65793,0,16769056,0,0,16777215,12624000,12624000,12624000,0,65793},
					{65793,65793,0,0,65793,0,16769056,0,12624000,12624000,0,65793},
					{65793,0,16740464,0,65793,65793,0,0,16769056,12624000,0,65793},
					{65793,0,16777215,12624000,0,0,16777215,16769056,0,0,65793,65793},
					{0,12624000,0,16777215,0,0,16777215,0,65793,65793,65793,65793},
					{0,12624000,0,16777215,0,0,16777215,0,0,65793,65793,65793},
					{65793,0,16777215,12624000,0,0,16777215,0,16769056,0,0,65793},
					{65793,0,16740464,0,65793,0,0,65793,0,16769056,12624000,0},
					{65793,65793,0,65793,0,16769056,0,0,0,12624000,12624000,0},
					{65793,0,16769056,0,0,16777215,0,16777215,12624000,12624000,12624000,0},
					{65793,65793,0,65793,65793,0,65793,0,0,0,0,65793},
					{65793,65793,0,65793,65793,0,65793,0,0,0,0,65793},
					{65793,0,16769056,0,0,16777215,0,16777215,12624000,12624000,12624000,0},
					{65793,65793,0,65793,0,16769056,0,0,0,12624000,12624000,0},
					{65793,0,16740464,0,65793,0,0,65793,0,16769056,12624000,0},
					{65793,0,16777215,12624000,0,0,16777215,0,16769056,0,0,65793},
					{0,12624000,0,16777215,0,0,16777215,0,0,65793,65793,65793},
					{0,12624000,0,16777215,0,0,16777215,0,65793,65793,65793,65793},
					{65793,0,16777215,12624000,0,0,16777215,16769056,0,0,65793,65793},
					{65793,0,16740464,0,65793,65793,0,0,16769056,12624000,0,65793},
					{65793,65793,0,0,65793,0,16769056,0,12624000,12624000,0,65793},
					{65793,65793,0,16769056,0,0,16777215,12624000,12624000,12624000,0,65793},
					{65793,65793,65793,0,65793,65793,0,0,0,0,65793,65793}};
		}
		throw new Exception("Values not tabulated: "+gen);
	}
	
	private int[][] getMergeSpriteTable(SpriteGenerator gen, 
			Sprite spr1,
			double mergeRatio) throws Exception { 
		if(gen == generator1 && spr1 == animatedSprite1 && mergeRatio == 0.8){
			return new int[][]{{65793,65793,0,65793,65793,0,65793,0,0,0,0,65793},
					{65793,0,16777215,0,0,16777215,0,16769056,16769056,16777215,12624000,0},
					{65793,65793,0,65793,0,16769056,0,0,0,16777215,12624000,0},
					{65793,0,16740464,0,65793,0,0,65793,0,12624000,8421504,0},
					{65793,0,16777215,16769056,0,0,12624000,0,16777215,0,0,65793},
					{0,12624000,0,16769056,0,0,12624000,0,0,65793,65793,65793},
					{0,12624000,0,16769056,0,0,12624000,0,0,65793,65793,65793},
					{65793,0,16777215,16769056,0,0,12624000,0,16777215,0,0,65793},
					{65793,0,16740464,0,65793,0,0,65793,0,12624000,8421504,0},
					{65793,65793,0,65793,0,16769056,0,0,0,16777215,12624000,0},
					{65793,0,16777215,0,0,16777215,0,16769056,16769056,16777215,12624000,0},
					{65793,65793,0,65793,65793,0,65793,0,0,0,0,65793},
					{65793,65793,65793,0,65793,65793,0,0,0,0,65793,65793},
					{65793,65793,0,16777215,0,0,16777215,16769056,16777215,12624000,0,65793},
					{65793,65793,0,0,65793,0,16769056,0,16777215,12624000,0,65793},
					{65793,0,16740464,0,65793,65793,0,0,12624000,8421504,0,65793},
					{65793,0,16777215,16769056,0,0,12624000,16777215,0,0,65793,65793},
					{0,12624000,0,16769056,0,0,12624000,0,65793,65793,65793,65793},
					{0,12624000,0,16769056,0,0,12624000,0,0,65793,65793,65793},
					{65793,0,16777215,16769056,0,0,12624000,0,16777215,0,0,65793},
					{65793,0,16740464,0,65793,0,0,65793,0,12624000,8421504,0},
					{65793,65793,0,65793,0,16769056,0,0,0,16777215,12624000,0},
					{65793,0,16777215,0,0,16777215,0,16769056,16769056,16777215,12624000,0},
					{65793,65793,0,65793,65793,0,65793,0,0,0,0,65793},
					{65793,65793,0,65793,65793,0,65793,0,0,0,0,65793},
					{65793,0,16777215,0,0,16777215,0,16769056,16769056,16777215,12624000,0},
					{65793,65793,0,65793,0,16769056,0,0,0,16777215,12624000,0},
					{65793,0,16740464,0,65793,0,0,65793,0,12624000,8421504,0},
					{65793,0,16777215,16769056,0,0,12624000,0,16777215,0,0,65793},
					{0,12624000,0,16769056,0,0,12624000,0,0,65793,65793,65793},
					{0,12624000,0,16769056,0,0,12624000,0,65793,65793,65793,65793},
					{65793,0,16777215,16769056,0,0,12624000,16777215,0,0,65793,65793},
					{65793,0,16740464,0,65793,65793,0,0,12624000,8421504,0,65793},
					{65793,65793,0,0,65793,0,16769056,0,16777215,12624000,0,65793},
					{65793,65793,0,16777215,0,0,16777215,16769056,16777215,12624000,0,65793},
					{65793,65793,65793,0,65793,65793,0,0,0,0,65793,65793}};
		}
		throw new Exception("Values not tabulated: "+gen+" "+spr1+" "+mergeRatio);
	}
}
