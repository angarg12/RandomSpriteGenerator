package examples.tools.spritegen.test;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

import examples.tools.spritegen.PixelArtGen;
import examples.tools.spritegen.Sprite;

public class PixelArtGenTest {	
	PixelArtGen generator1;
	int[] colorTable1;
	Sprite sprite1;
	
	@Before
	public void setUp() throws Exception {
		generator1 = PixelArtGen.shapes2[0];
		colorTable1 = new int[]	{
				0x010101, 0x010101, 0x010101, // trans
				0x000000, 0x000000, 0x000000,     // outline
				0xC0A080, 0x806040, 0x503010,     // col2
				0xFF7070, 0xD04040, 0xB02020,     // col1
				0xFFE020, 0xFFB000, 0xF0A000,     // col3
				0xFFFFFF, 0xB0B0B0, 0x808080,     // highlight
				};
		initializeSprites();
	}
	
	public void initializeSprites() throws Exception {
		sprite1 = new Sprite(colorTable1, generator1, 0, 0, 0);
		sprite1.colidx = new int[][]{{0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0}};
		sprite1.hull = new int[][]{{0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,10,0,0,10,0,10,10,10,10,0},
				{0,0,0,0,0,10,0,0,0,10,10,0},
				{0,0,10,0,0,0,0,0,0,10,10,0},
				{0,0,10,10,0,0,10,0,10,0,0,0},
				{0,10,0,10,0,0,10,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0}};
		sprite1.pixels = new int[][]{{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
				{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793}};
	}
	
	@Test
	public void test() throws Exception {
		spriteFunctionsTest(generator1,colorTable1,sprite1);
	}
	//mergeSprites
	//createSprite
	// need their own function
	private void spriteFunctionsTest(PixelArtGen gen, int[] coltable, Sprite spr) throws Exception {
		colorize(gen,coltable,spr);
		flipAndShade(gen,coltable,spr);
		bevelShadeNew(gen,coltable,spr);
		gouraudShade(gen,coltable,spr);
		indexToRGB(gen,coltable,spr);
		animate(gen,coltable,spr);
		addOutlineRGB(gen,coltable,spr);
	}

	private void colorize(PixelArtGen gen, int[] coltable, Sprite spr) throws Exception {
		Sprite clone = spr.clone();
		PixelArtGen.fixRandom(1000);
		gen.colorize(clone);
		assertArrayEquals("Colorized sprite does not match the expected.", getColorizeTable(gen, coltable, spr), clone.colidx);
	}
	
	private void flipAndShade(PixelArtGen gen, int[] coltable, Sprite spr) throws Exception {
		Sprite clone = spr.clone();
		PixelArtGen.fixRandom(1000);
		gen.colorize(clone);
		PixelArtGen.fixRandom(1000);
		gen.flipAndShade(clone);
		assertArrayEquals("Flipped sprite does not match the expected.", getFlipTable(gen, coltable, spr), clone.colidx);
	}
	
	private void bevelShadeNew(PixelArtGen gen, int[] coltable, Sprite spr) throws Exception {
		Sprite clone = spr.clone();
		PixelArtGen.fixRandom(1000);
		gen.colorize(clone);
		PixelArtGen.fixRandom(1000);
		gen.flipAndShade(clone);
		PixelArtGen.fixRandom(1000);
		gen.bevelShadeNew(clone);
		assertArrayEquals("Bevel shaded sprite does not match the expected.", getBevelShadeTable(gen, coltable, spr), clone.colidx);
	}

	private void gouraudShade(PixelArtGen gen, int[] coltable, Sprite spr) throws Exception {
		Sprite clone = spr.clone();
		PixelArtGen.fixRandom(1000);
		gen.colorize(clone);
		PixelArtGen.fixRandom(1000);
		gen.flipAndShade(clone);
		PixelArtGen.fixRandom(1000);
		gen.gouraudShade(clone);
		assertArrayEquals("Gouraud shaded sprite does not match the expected.", getGouraudShadeTable(gen, coltable, spr), clone.colidx);
	}

	private void indexToRGB(PixelArtGen gen, int[] coltable, Sprite spr) throws Exception {
		Sprite clone = spr.clone();
		PixelArtGen.fixRandom(1000);
		gen.colorize(clone);
		PixelArtGen.fixRandom(1000);
		gen.flipAndShade(clone);
		PixelArtGen.fixRandom(1000);
		gen.bevelShadeNew(clone);
		PixelArtGen.fixRandom(1000);
		gen.indexToRGB(clone);
		assertArrayEquals("Colored sprite does not match the expected.", getIndexToRGBTable(gen, coltable, spr), clone.pixels);
	}

	private void animate(PixelArtGen gen, int[] coltable, Sprite spr) throws Exception {
		Sprite clone = spr.clone();
		PixelArtGen.fixRandom(1000);
		gen.colorize(clone);
		PixelArtGen.fixRandom(1000);
		gen.flipAndShade(clone);
		PixelArtGen.fixRandom(1000);
		gen.bevelShadeNew(clone);
		PixelArtGen.fixRandom(1000);
		gen.indexToRGB(clone);
		PixelArtGen.fixRandom(1000);
		gen.animate(clone);
		assertArrayEquals("Animated sprite does not match the expected.", getAnimateTable(gen, coltable, spr), clone.pixels);
	}

	private void addOutlineRGB(PixelArtGen gen, int[] coltable, Sprite spr) throws Exception {
		Sprite clone = spr.clone();
		PixelArtGen.fixRandom(1000);
		gen.colorize(clone);
		PixelArtGen.fixRandom(1000);
		gen.flipAndShade(clone);
		PixelArtGen.fixRandom(1000);
		gen.bevelShadeNew(clone);
		PixelArtGen.fixRandom(1000);
		gen.indexToRGB(clone);
		PixelArtGen.fixRandom(1000);
		gen.animate(clone);
		PixelArtGen.addOutlineRGB(clone.pixels);
		assertArrayEquals("Outline RGB sprite does not match the expected.", getAddOutlineRGBTable(gen, coltable, spr), clone.pixels);
	}
	
	private int[][] getColorizeTable(PixelArtGen gen, 
			int[] coltable, 
			Sprite spr) throws Exception { 
		if(coltable == colorTable1 && gen == generator1 && spr == sprite1){
			return new int[][]{{0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,15,0,0,12,0,12,12,15,6,0},
					{0,0,0,0,0,12,0,0,0,6,6,0},
					{0,0,9,0,0,0,0,0,0,6,15,0},
					{0,0,12,12,0,0,6,0,15,0,0,0},
					{0,9,0,12,0,0,6,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0}};
		}
		throw new Exception("Values not tabulated: "+gen+" "+coltable+" "+spr);
	}
	
	private int[][] getFlipTable(PixelArtGen gen, 
			int[] coltable, 
			Sprite spr) throws Exception { 
		if(coltable == colorTable1 && gen == generator1 && spr == sprite1){
			return new int[][]{{0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,15,0,0,12,0,12,12,15,6,0},
					{0,0,0,0,0,12,0,0,0,6,6,0},
					{0,0,9,0,0,0,0,0,0,6,15,0},
					{0,0,12,12,0,0,6,0,15,0,0,0},
					{0,9,0,12,0,0,6,0,0,0,0,0},
					{0,9,0,12,0,0,6,0,0,0,0,0},
					{0,0,12,12,0,0,6,0,15,0,0,0},
					{0,0,9,0,0,0,0,0,0,6,15,0},
					{0,0,0,0,0,12,0,0,0,6,6,0},
					{0,0,15,0,0,12,0,12,12,15,6,0},
					{0,0,0,0,0,0,0,0,0,0,0,0}};
		}
		throw new Exception("Values not tabulated: "+gen+" "+coltable+" "+spr);
	}
	
	private int[][] getBevelShadeTable(PixelArtGen gen, 
			int[] coltable, 
			Sprite spr) throws Exception { 
		if(coltable == colorTable1 && gen == generator1 && spr == sprite1){
			return new int[][]{{0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,15,0,0,12,0,12,12,15,6,0},
					{0,0,0,0,0,12,0,0,0,15,8,0},
					{0,0,9,0,0,0,0,0,0,6,17,0},
					{0,0,12,12,0,0,6,0,15,0,0,0},
					{0,9,0,12,0,0,6,0,0,0,0,0},
					{0,9,0,12,0,0,6,0,0,0,0,0},
					{0,0,15,14,0,0,6,0,15,0,0,0},
					{0,0,9,0,0,0,0,0,0,15,15,0},
					{0,0,0,0,0,12,0,0,0,15,8,0},
					{0,0,15,0,0,12,0,12,12,17,8,0},
					{0,0,0,0,0,0,0,0,0,0,0,0}};
		}
		throw new Exception("Values not tabulated: "+gen+" "+coltable+" "+spr);
	}
	
	private int[][] getGouraudShadeTable(PixelArtGen gen, 
			int[] coltable, 
			Sprite spr) throws Exception { 
		if(coltable == colorTable1 && gen == generator1 && spr == sprite1){
			return new int[][]{{0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,15,0,0,14,0,14,14,17,8,0},
					{0,0,0,0,0,15,0,0,0,8,8,0},
					{0,0,15,0,0,0,0,0,0,8,17,0},
					{0,0,12,15,0,0,6,0,17,0,0,0},
					{0,9,0,12,0,0,15,0,0,0,0,0},
					{0,15,0,15,0,0,6,0,0,0,0,0},
					{0,0,15,12,0,0,15,0,15,0,0,0},
					{0,0,9,0,0,0,0,0,0,8,17,0},
					{0,0,0,0,0,14,0,0,0,8,8,0},
					{0,0,17,0,0,14,0,14,14,17,8,0},
					{0,0,0,0,0,0,0,0,0,0,0,0}};
		}
		throw new Exception("Values not tabulated: "+gen+" "+coltable+" "+spr);
	}
	
	private int[][] getIndexToRGBTable(PixelArtGen gen, 
			int[] coltable, 
			Sprite spr) throws Exception { 
		if(coltable == colorTable1 && gen == generator1 && spr == sprite1){
			return new int[][]{{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,16777215,65793,65793,16769056,65793,16769056,16769056,16777215,12624000,65793},
					{65793,65793,65793,65793,65793,16769056,65793,65793,65793,16777215,5255184,65793},
					{65793,65793,16740464,65793,65793,65793,65793,65793,65793,12624000,8421504,65793},
					{65793,65793,16769056,16769056,65793,65793,12624000,65793,16777215,65793,65793,65793},
					{65793,16740464,65793,16769056,65793,65793,12624000,65793,65793,65793,65793,65793},
					{65793,16740464,65793,16769056,65793,65793,12624000,65793,65793,65793,65793,65793},
					{65793,65793,16777215,15769600,65793,65793,12624000,65793,16777215,65793,65793,65793},
					{65793,65793,16740464,65793,65793,65793,65793,65793,65793,16777215,16777215,65793},
					{65793,65793,65793,65793,65793,16769056,65793,65793,65793,16777215,5255184,65793},
					{65793,65793,16777215,65793,65793,16769056,65793,16769056,16769056,8421504,5255184,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793}};
		}
		throw new Exception("Values not tabulated: "+gen+" "+coltable+" "+spr);
	}
	
	private int[][] getAnimateTable(PixelArtGen gen, 
			int[] coltable, 
			Sprite spr) throws Exception { 
		if(coltable == colorTable1 && gen == generator1 && spr == sprite1){
			return new int[][]{{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,16777215,65793,65793,16769056,65793,16769056,16769056,16777215,12624000,65793},
					{65793,65793,65793,65793,65793,16769056,65793,65793,65793,16777215,5255184,65793},
					{65793,65793,16740464,65793,65793,65793,65793,65793,65793,12624000,8421504,65793},
					{65793,65793,16769056,16769056,65793,65793,12624000,65793,16777215,65793,65793,65793},
					{65793,16740464,65793,16769056,65793,65793,12624000,65793,65793,65793,65793,65793},
					{65793,16740464,65793,16769056,65793,65793,12624000,65793,65793,65793,65793,65793},
					{65793,65793,16777215,15769600,65793,65793,12624000,65793,16777215,65793,65793,65793},
					{65793,65793,16740464,65793,65793,65793,65793,65793,65793,16777215,16777215,65793},
					{65793,65793,65793,65793,65793,16769056,65793,65793,65793,16777215,5255184,65793},
					{65793,65793,16777215,65793,65793,16769056,65793,16769056,16769056,8421504,5255184,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,16777215,65793,65793,16769056,16769056,16777215,12624000,65793,65793},
					{65793,65793,65793,65793,65793,65793,16769056,65793,16777215,5255184,65793,65793},
					{65793,65793,16740464,65793,65793,65793,65793,65793,12624000,8421504,65793,65793},
					{65793,65793,16769056,16769056,65793,65793,12624000,16777215,65793,65793,65793,65793},
					{65793,16740464,65793,16769056,65793,65793,12624000,65793,65793,65793,65793,65793},
					{65793,16740464,65793,16769056,65793,65793,12624000,65793,65793,65793,65793,65793},
					{65793,65793,16777215,15769600,65793,65793,12624000,65793,16777215,65793,65793,65793},
					{65793,65793,16740464,65793,65793,65793,65793,65793,65793,16777215,16777215,65793},
					{65793,65793,65793,65793,65793,16769056,65793,65793,65793,16777215,5255184,65793},
					{65793,65793,16777215,65793,65793,16769056,65793,16769056,16769056,8421504,5255184,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793},
					{65793,65793,16777215,65793,65793,16769056,65793,16769056,16769056,16777215,12624000,65793},
					{65793,65793,65793,65793,65793,16769056,65793,65793,65793,16777215,5255184,65793},
					{65793,65793,16740464,65793,65793,65793,65793,65793,65793,12624000,8421504,65793},
					{65793,65793,16769056,16769056,65793,65793,12624000,65793,16777215,65793,65793,65793},
					{65793,16740464,65793,16769056,65793,65793,12624000,65793,65793,65793,65793,65793},
					{65793,16740464,65793,16769056,65793,65793,12624000,65793,65793,65793,65793,65793},
					{65793,65793,16777215,15769600,65793,65793,12624000,16777215,65793,65793,65793,65793},
					{65793,65793,16740464,65793,65793,65793,65793,65793,16777215,16777215,65793,65793},
					{65793,65793,65793,65793,65793,65793,16769056,65793,16777215,5255184,65793,65793},
					{65793,65793,65793,16777215,65793,65793,16769056,16769056,8421504,5255184,65793,65793},
					{65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793,65793}};
		}
		throw new Exception("Values not tabulated: "+gen+" "+coltable+" "+spr);
	}
	
	private int[][] getAddOutlineRGBTable(PixelArtGen gen, 
			int[] coltable, 
			Sprite spr) throws Exception { 
		if(coltable == colorTable1 && gen == generator1 && spr == sprite1){
			return new int[][]{{65793,65793,0,65793,65793,0,65793,0,0,0,0,65793},
					{65793,0,16777215,0,0,16769056,0,16769056,16769056,16777215,12624000,0},
					{65793,65793,0,65793,0,16769056,0,0,0,16777215,5255184,0},
					{65793,0,16740464,0,65793,0,0,65793,0,12624000,8421504,0},
					{65793,0,16769056,16769056,0,0,12624000,0,16777215,0,0,65793},
					{0,16740464,0,16769056,0,0,12624000,0,0,65793,65793,65793},
					{0,16740464,0,16769056,0,0,12624000,0,0,65793,65793,65793},
					{65793,0,16777215,15769600,0,0,12624000,0,16777215,0,0,65793},
					{65793,0,16740464,0,65793,0,0,65793,0,16777215,16777215,0},
					{65793,65793,0,65793,0,16769056,0,0,0,16777215,5255184,0},
					{65793,0,16777215,0,0,16769056,0,16769056,16769056,8421504,5255184,0},
					{65793,65793,0,65793,65793,0,65793,0,0,0,0,65793},
					{65793,65793,65793,0,65793,65793,0,0,0,0,65793,65793},
					{65793,65793,0,16777215,0,0,16769056,16769056,16777215,12624000,0,65793},
					{65793,65793,0,0,65793,0,16769056,0,16777215,5255184,0,65793},
					{65793,0,16740464,0,65793,65793,0,0,12624000,8421504,0,65793},
					{65793,0,16769056,16769056,0,0,12624000,16777215,0,0,65793,65793},
					{0,16740464,0,16769056,0,0,12624000,0,65793,65793,65793,65793},
					{0,16740464,0,16769056,0,0,12624000,0,0,65793,65793,65793},
					{65793,0,16777215,15769600,0,0,12624000,0,16777215,0,0,65793},
					{65793,0,16740464,0,65793,0,0,65793,0,16777215,16777215,0},
					{65793,65793,0,65793,0,16769056,0,0,0,16777215,5255184,0},
					{65793,0,16777215,0,0,16769056,0,16769056,16769056,8421504,5255184,0},
					{65793,65793,0,65793,65793,0,65793,0,0,0,0,65793},
					{65793,65793,0,65793,65793,0,65793,0,0,0,0,65793},
					{65793,0,16777215,0,0,16769056,0,16769056,16769056,16777215,12624000,0},
					{65793,65793,0,65793,0,16769056,0,0,0,16777215,5255184,0},
					{65793,0,16740464,0,65793,0,0,65793,0,12624000,8421504,0},
					{65793,0,16769056,16769056,0,0,12624000,0,16777215,0,0,65793},
					{0,16740464,0,16769056,0,0,12624000,0,0,65793,65793,65793},
					{0,16740464,0,16769056,0,0,12624000,0,65793,65793,65793,65793},
					{65793,0,16777215,15769600,0,0,12624000,16777215,0,0,65793,65793},
					{65793,0,16740464,0,65793,65793,0,0,16777215,16777215,0,65793},
					{65793,65793,0,0,65793,0,16769056,0,16777215,5255184,0,65793},
					{65793,65793,0,16777215,0,0,16769056,16769056,8421504,5255184,0,65793},
					{65793,65793,65793,0,65793,65793,0,0,0,0,65793,65793}};
		}
		throw new Exception("Values not tabulated: "+gen+" "+coltable+" "+spr);
	}
}
