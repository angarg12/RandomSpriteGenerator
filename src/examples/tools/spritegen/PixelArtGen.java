package examples.tools.spritegen;

import java.io.*;
import java.util.Random;

public class PixelArtGen {

	static int transcolor = 0x010101;

	static int[][] coltables = new int[][] {
			{ transcolor, transcolor, transcolor, // trans
					0x000000, 0x000000, 0x000000, // outline
					0xC0A080, 0x806040, 0x503010, // col2
					0xFF7070, 0xD04040, 0xB02020, // col1
					0xFFE020, 0xFFB000, 0xF0A000, // col3
					0xFFFFFF, 0xB0B0B0, 0x808080, // highlight
			}, { transcolor, transcolor, transcolor, // trans
					0x000000, 0x000000, 0x000000, // outline
					0x808080, 0x505050, 0x202020, // col2
					0x9090FF, 0x6060F0, 0x4040E0, // col1
					0x20E0FF, 0x00B0FF, 0x00A0F0, // col3
					0xFFFFFF, 0xB0B0B0, 0x808080, // highlight
			}, { transcolor, transcolor, transcolor, // trans
					0x000000, 0x000000, 0x000000, // outline
					0xA0C080, 0x608040, 0x305010, // col2
					0x70FF70, 0x40D040, 0x20B020, // col1
					0xE0FF20, 0xB0FF00, 0xA0F000, // col3
					0xFFFFFF, 0xB0B0B0, 0x808080, // highlight
			}, { transcolor, transcolor, transcolor, // trans
					0x000000, 0x000000, 0x000000, // outline
					0x907090, 0x604060, 0x301030, // col2
					0xE020E0, 0xB000B0, 0xA000A0, // col3
					0xFF9090, 0xF06060, 0xE04040, // col1
					0xFFFFFF, 0xB0B0B0, 0x808080, // highlight
			}, { transcolor, transcolor, transcolor, // trans
					0x000000, 0x000000, 0x000000, // outline
					0xA080C0, 0x604080, 0x301050, // col2
					0x7070FF, 0x4040D0, 0x2020B0, // col1
					0xE020FF, 0xB000FF, 0xA000F0, // col3
					0xFFFFFF, 0xB0B0B0, 0x808080, // highlight
			}, { transcolor, transcolor, transcolor, // trans
					0x000000, 0x000000, 0x000000, // outline
					0x80A0C0, 0x507090, 0x204060, // col2
					0x20D0F0, 0x00B0D0, 0x0090B0, // col3
					0x50FF50, 0x30F030, 0x10E010, // col1
					0xFFFFFF, 0xB0B0B0, 0x808080, // highlight
			}, { // red/yellow
			transcolor, transcolor, transcolor, // trans
					0x000000, 0x000000, 0x000000, // outline
					0xFF0000, 0xD00000, 0xA00000, // col
					0xFF0000, 0xD00000, 0xA00000, // col
					0xFFD000, 0xD0B000, 0xA08000, // col
					0xFFFFFF, 0xB0B0B0, 0x808080, // highlight
			}, { // blue
			transcolor, transcolor, transcolor, // trans
					0x000000, 0x000000, 0x000000, // outline
					0x0000FF, 0x0000D0, 0x0000A0, // col
					0x0000FF, 0x0000D0, 0x0000A0, // col
					0x9090FF, 0x6868D0, 0x4040A0, // col
					0xFFFFFF, 0xB0B0B0, 0x808080, // highlight
			}, };

	// filltable values:
	// bit 0-1:
	// 00 = leave blank
	// 01 = randomly fill or leave blank
	// 10 = always fill
	// 11 = outline (always black)
	// bit 2:
	// 0 = disable black
	// 1 = enable black
	// bit 3:
	// 0 = disable extra highlights
	// 1 = enable extra highlights
	// So:
	// 0 = transparent
	// 1 = transparent or any colour except black
	// 2 = any colour except black
	// 3 = always black
	// 4 = N/A (transparent)
	// 5 = transparent or any colour + black
	// 6 = any colour + black
	// 7 = N/A (always black)
	// 8 = N/A (transparent)
	// 9 = transparent or colour with highlights, no black
	// A = colour with highlights, no black 1010
	// B = N/A (always black)
	// C = N/A (transparent)
	// D = transparent or colour with highlights + black
	// E = colour with highlights + black
	// F = N/A (always black)

	static final int A = 10;
	static final int B = 11;
	static final int C = 12;
	static final int D = 13;
	static final int E = 14;
	static final int F = 15;
	static final int G = 16;

	static int[][] shipfilltable = new int[][] { { 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0, 0, 1, 2 }, { 0, 0, 0, 0, 0, 0, 1, 2 },
			{ 0, 0, 0, 0, 0, 0, 1, 2 }, { 0, 0, 0, 0, 0, 1, 2, 2 },
			{ 0, 0, 0, 0, 0, 1, 2, A }, { 0, 0, 0, 0, 1, 2, 2, A },
			{ 0, 0, 0, 0, 2, 2, A, A }, { 0, 1, 9, 2, 2, 2, A, A },
			{ 0, 9, A, 2, 2, 2, A, A }, { 0, 9, A, 2, 2, A, A, A },
			{ 0, 9, A, 2, 2, A, A, A }, { 0, 9, A, 1, 1, 2, A, A },
			{ 0, 9, A, 1, 2, 2, 9, 9 }, { 0, 9, 9, 1, 1, 1, 9, 9 },
			{ 0, 0, 0, 0, 0, 0, 0, 0 }, };

	static int[][] ship2filltable = new int[][] { { 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 1, 1, 0, 0, 0, 0, 0 }, { 0, 1, 1, 0, 0, 0, 1, 1 },
			{ 0, 1, 1, 0, 0, 0, 1, 1 }, { 0, 1, 1, 0, 0, 0, 1, 1 },
			{ 0, 2, 1, 0, 0, 1, 1, 1 }, { 0, A, 9, 0, 1, 1, 2, A },
			{ 0, A, 9, 1, 2, 2, A, A }, { 0, 9, A, 2, 2, 2, A, A },
			{ 0, 9, A, 2, 2, 2, A, A }, { 0, 9, A, 2, 2, A, A, A },
			{ 0, 1, 1, 2, 2, A, A, A }, { 0, 0, 1, 1, 1, 2, A, A },
			{ 0, 0, 0, 1, 2, 2, 2, 2 }, { 0, 0, 0, 0, 1, 2, 1, 1 },
			{ 0, 0, 0, 0, 0, 0, 0, 0 }, };

	static int[][] butterflyfilltable = new int[][] {
			{ 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 1, 0, 0, 9, 9, 1 },
			{ 0, 1, 1, 1, 0, 0, 9, A }, { 0, 1, A, 9, 1, 0, 9, A },
			{ 0, 1, 9, A, 1, 1, 1, 2 }, { 0, 0, 1, 2, 2, 2, 2, 2 },
			{ 0, 0, 1, 1, 2, 2, 2, 2 }, { 0, 0, 0, 1, 1, 2, 2, 2 },
			{ 0, 0, 0, 1, 2, 2, 2, 2 }, { 0, 0, 1, 2, 2, 1, 2, 2 },
			{ 0, 1, A, A, 1, 1, 9, A }, { 0, 1, A, 9, 1, 0, 9, A },
			{ 0, 1, 1, 1, 0, 0, 1, A }, { 0, 1, 1, 0, 0, 0, 1, 2 },
			{ 0, 1, 1, 0, 0, 0, 1, 1 }, { 0, 0, 0, 0, 0, 0, 0, 0 }, };

	static int[][] butterflyfilltable18 = new int[][] {
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 1, 1, 0, 0, 9, 9, 1 },
			{ 0, 1, 1, 2, 1, 0, 0, A, A }, { 0, 1, A, A, 9, 1, 0, 9, A },
			{ 0, 1, 9, 9, A, 1, 1, 1, 2 }, { 0, 1, 9, 9, A, 1, 1, 1, 2 },
			{ 0, 0, 1, 1, 2, 2, 2, 2, 2 }, { 0, 0, 1, 1, 1, 2, 2, 2, 2 },
			{ 0, 0, 0, 0, 0, 1, 2, 2, 2 }, { 0, 0, 0, 1, 1, 2, 2, 2, 2 },
			{ 0, 0, 1, 1, 2, 2, 1, 2, 2 }, { 0, 1, A, A, A, 1, 1, 9, A },
			{ 0, 1, A, A, A, 1, 1, 9, A }, { 0, 1, A, A, 9, 1, 0, 9, A },
			{ 0, 1, 1, 1, 1, 1, 0, 1, A }, { 0, 1, 1, 1, 1, 0, 0, 1, 2 },
			{ 0, 1, 1, 1, 0, 0, 0, 1, 1 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, };

	static int[][] butterflyfilltable20 = new int[][] {
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 1, 1, 1, 0, 0, 1, 9, 1 },
			{ 0, 1, 1, 2, 1, 1, 0, 0, 9, A }, { 0, 1, A, A, A, A, 0, 0, 9, A },
			{ 0, 1, A, A, A, A, 1, 1, 1, A }, { 0, 1, 1, 2, 2, 2, 2, 2, 2, 2 },
			{ 0, 0, 1, 1, 2, 2, 2, 2, 2, 2 }, { 0, 0, 1, 1, 2, 2, 2, 2, 2, 2 },
			{ 0, 0, 0, 1, 1, 1, 2, 2, 2, 2 }, { 0, 0, 0, 0, 0, 1, 1, 2, 2, 2 },
			{ 0, 0, 0, 0, 0, 1, 2, 2, 2, 2 }, { 0, 0, 0, 1, 2, 2, 2, 1, 2, 2 },
			{ 0, 0, 1, 1, 2, 2, 2, 1, 2, 2 }, { 0, 1, A, A, A, A, 1, 1, 9, A },
			{ 0, 1, A, A, A, A, 1, 1, 9, A }, { 0, 1, A, A, 9, 9, 1, 0, 9, A },
			{ 0, 1, 1, 2, 1, 1, 0, 0, 1, A }, { 0, 1, 1, 1, 1, 0, 0, 0, 1, 2 },
			{ 0, 0, 1, 1, 0, 0, 0, 1, 1, 1 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, };

	// 1 = 1x up
	// 2 = 1x up right
	// 3 = 1x right
	// 4 = 1x down right
	// 5 = 1x down
	// 6 = 1x down left
	// 7 = 1x left
	// 8 = 1x up left
	// 9 .. 16 = 2x
	//
	// 9
	// G 1 A
	// 8 | 2
	// \ | /
	// F 7--- ---3 B
	// / | \
	// 6 | 4
	// E 5 C
	// D

	static int[][][] birdanimtable = new int[][][] {
			{ { 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7 },

			},
			{ { B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F },
					{ B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F },
					{ B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F },
					{ B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F },
					{ B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F },
					{ B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F },
					{ B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F },
					{ B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F },
					{ B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F },
					{ B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F },
					{ B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F },
					{ B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F },
					{ B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F },
					{ B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F },
					{ B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F },
					{ B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F }, } };

	static int[][][] birdanimtable18 = new int[][][] {
			{ { 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },

			},
			{ { B, B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F, F },
					{ B, B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F, F },
					{ B, B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F, F },
					{ B, B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F, F },
					{ B, B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F, F },
					{ B, B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F, F },
					{ B, B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F, F },
					{ B, B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F, F },
					{ B, B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F, F },
					{ B, B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F, F },
					{ B, B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F, F },
					{ B, B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F, F },
					{ B, B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F, F },
					{ B, B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F, F },
					{ B, B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F, F },
					{ B, B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F, F },
					{ B, B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F, F },
					{ B, B, B, B, B, 3, 3, 0, 0, 0, 0, 7, 7, F, F, F, F, F }, },
			{ { 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7 }, } };

	static int[][] ufofilltable = new int[][] { { 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 1, 1, 1, 1 }, { 0, 0, 0, 1, 1, 1, 1, 1 },
			{ 0, 0, 1, 1, 1, 9, 9, 9 }, { 0, 1, 1, 1, 9, 9, 9, 9 },
			{ 0, 1, 1, 9, 9, 9, A, A }, { 0, 1, 1, 9, 9, A, A, A },
			{ 0, 1, 1, 9, 9, A, A, A }, };

	static int[][] ufofilltable18 = new int[][] {
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 1, 1, 1, 1 },
			{ 0, 0, 0, 1, 1, 1, 1, 1, 1 }, { 0, 0, 1, 1, 1, 1, 9, 9, 9 },
			{ 0, 1, 1, 1, 9, 9, 9, 9, 9 }, { 0, 1, 1, 1, 9, 9, 9, 9, 9 },
			{ 0, 1, 1, 9, 9, 9, 9, 9, 9 }, { 0, 1, 1, 9, 9, 9, 9, 9, 9 },
			{ 0, 1, 1, 9, 9, 9, 9, 9, 9 }, };

	static int[][] manfilltable = new int[][] { { 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 1, 1, 1, 2, A }, { 0, 0, 0, 1, 1, 2, A, A },
			{ 0, 0, 0, 1, 1, 1, 2, 2 }, { 0, 0, 0, 0, 0, 1, 2, 2 },
			{ 0, 0, 0, 0, 1, A, 2, A }, { 0, 0, 0, 1, A, 2, 2, A },
			{ 0, 0, 1, A, 2, 1, 2, A }, { 0, 1, 2, 2, 1, 1, 2, A },
			{ 0, 1, 1, 1, 1, 1, 2, 2 }, { 0, 1, 1, 0, 0, 1, A, 1 },
			{ 0, 0, 0, 0, 1, A, 2, 1 }, { 0, 0, 0, 1, A, 2, 1, 1 },
			{ 0, 0, 1, 2, A, 1, 1, 0 }, { 0, 1, 1, 2, 2, 1, 0, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0 }, };

	static int[][] manfilltable18 = new int[][] {
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 1, 1, 2, 2, A },
			{ 0, 0, 0, 1, 1, 1, 2, A, A }, { 0, 0, 0, 0, 1, 1, 1, 2, 2 },
			{ 0, 0, 0, 0, 0, 1, A, 2, A }, { 0, 0, 0, 0, 1, A, 2, 2, A },
			{ 0, 0, 0, 1, A, 2, 1, 2, A }, { 0, 0, 2, 2, 2, 1, 1, 2, A },
			{ 0, 1, 2, 2, 2, 1, 1, 2, A }, { 0, 1, 1, 1, 1, 1, 1, 2, 2 },
			{ 0, 1, 1, 1, 0, 0, 1, A, 1 }, { 0, 1, 1, 0, 0, 1, A, 2, 1 },
			{ 0, 0, 0, 0, 1, A, 2, 1, 1 }, { 0, 0, 0, 1, 2, A, 1, 1, 0 },
			{ 0, 0, 1, 1, 2, A, 1, 1, 0 }, { 0, 1, 1, 1, 2, 2, 1, 0, 0 },
			{ 0, 1, 1, 2, 2, 2, 1, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, };

	static int[][][] mananimtable = new int[][][] {
			{ { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 },

			},
			{ { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },

			},
			{ { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 }, } };

	static int[][][] mananimtable18 = new int[][][] {
			{ { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },

			},
			{ { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },

			},
			{ { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, } };

	static int[][] fishfilltable = new int[][] {
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0 },
			{ 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 1, 1, 1, 2, 9, 0 },
			{ 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, A, A, 0 },
			{ 0, 1, 2, 2, A, A, A, A, A, 2, 2, 2, 2, 2, 2, 2, 2, 9, A, 0 },
			{ 0, 1, 2, A, A, A, A, A, A, A, 2, 2, 1, 1, 1, 1, 1, 9, 9, 0 },
	// {0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0},
	// {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	};

	static int[][] tilefilltable = new int[][] { { 2, 2, 2, 2, 2, 2, 2, 2 },
			{ 2, 6, 6, 2, 2, 2, 2, 2 }, { 2, 6, 6, 6, 2, 2, 2, 2 },
			{ 2, 2, 6, 6, 6, 2, 2, 2 }, { 2, 2, 2, 6, E, A, A, A },
			{ 2, 2, 2, 2, A, E, A, A }, { 2, 2, 2, 2, A, A, E, A },
			{ 2, 2, 2, 2, A, A, A, A }, };

	static int[][] bubblefilltable = new int[][] { { 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 2, 2, 2, 2 }, { 0, 0, 0, A, A, 1, 1, 1 },
			{ 0, 0, A, A, 1, 1, 1, 1 }, { 0, 2, A, 1, 1, 1, 1, 1 },
			{ 0, 2, 1, 1, 1, 1, 1, 1 }, { 0, 2, 1, 1, 1, 1, 1, 1 },
			{ 0, 2, 1, 1, 1, 1, 1, 1 }, };

	static int[][] blob10filltable = new int[][] { { 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 1, 1 }, { 0, 0, 1, 9, A }, { 0, 1, 9, A, A },
			{ 0, 1, 2, 2, 2 }, { 0, 1, 2, 2, 2 }, { 0, 1, 9, A, A },
			{ 0, 0, 1, 9, A }, { 0, 0, 0, 1, 1 }, { 0, 0, 0, 0, 0 }, };

	static int[][] rand6filltable = new int[][] { { D, D, D }, { D, D, D },
			{ D, D, D }, { D, D, D }, { D, D, D }, { D, D, D }, };

	static int[][] rand10filltable = new int[][] { { 0, 0, 0, 0, 0 },
			{ 0, 9, 9, 9, 9 }, { 0, 9, 9, 9, 9 }, { 0, 9, 9, 9, 9 },
			{ 0, 9, 9, 9, 9 }, { 0, 9, 9, 9, 9 }, { 0, 9, 9, 9, 9 },
			{ 0, 9, 9, 9, 9 }, { 0, 9, 9, 9, 9 }, { 0, 0, 0, 0, 0 }, };

	static int[][] rand10afilltable = new int[][] {
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 9, 9, 9, 9, 9, 9, 9, 9, 0 },
			{ 0, 9, 9, 9, 9, 9, 9, 9, 9, 0 }, { 0, 9, 9, 9, 9, 9, 9, 9, 9, 0 },
			{ 0, 9, 9, 9, 9, 9, 9, 9, 9, 0 }, { 0, 9, 9, 9, 9, 9, 9, 9, 9, 0 },
			{ 0, 9, 9, 9, 9, 9, 9, 9, 9, 0 }, { 0, 9, 9, 9, 9, 9, 9, 9, 9, 0 },
			{ 0, 9, 9, 9, 9, 9, 9, 9, 9, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, };

	static int[][] rand8afilltable = new int[][] { { 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 9, 9, 9, 9, 9, 9, 0 }, { 0, 9, 9, 9, 9, 9, 9, 0 },
			{ 0, 9, 9, 9, 9, 9, 9, 0 }, { 0, 9, 9, 9, 9, 9, 9, 0 },
			{ 0, 9, 9, 9, 9, 9, 9, 0 }, { 0, 9, 9, 9, 9, 9, 9, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0 }, };

	static int[][] rand12filltable = new int[][] { { 0, 0, 0, 0, 0, 0 },
			{ 0, 9, 9, 9, 9, 9 }, { 0, 9, 9, 9, 9, 9 }, { 0, 9, 9, 9, 9, 9 },
			{ 0, 9, 9, 9, 9, 9 }, { 0, 9, 9, 9, 9, 9 }, { 0, 9, 9, 9, 9, 9 },
			{ 0, 9, 9, 9, 9, 9 }, { 0, 9, 9, 9, 9, 9 }, { 0, 9, 9, 9, 9, 9 },
			{ 0, 9, 9, 9, 9, 9 }, { 0, 0, 0, 0, 0, 0 }, };

	static int[][] rand12yfilltable = new int[][] {
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0 },
			{ 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0 },
			{ 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0 },
			{ 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0 },
			{ 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0 }, };

	static int[][] rand12dfilltable = new int[][] { { 0, 0, 0, 0, 0, 0 },
			{ 0, 9, 9, 9, 9, 9 }, { 0, 9, 9, 9, 9, 9 }, { 0, 9, 9, 9, 9, 9 },
			{ 0, 9, 9, 9, 9, 9 }, { 0, 9, 9, 9, 9, 9 }, };

	static int[][] rand14filltable = new int[][] { { 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 1, 1, 1, 1, 1, 1 }, { 0, 1, 1, 1, 1, 1, 1 },
			{ 0, 1, 1, 1, 1, 1, 1 }, { 0, 1, 1, 1, 1, 1, 1 },
			{ 0, 1, 1, 1, 1, 1, 1 }, { 0, 1, 1, 1, 1, 1, 1 },
			{ 0, 1, 1, 1, 1, 1, 1 }, { 0, 1, 1, 1, 1, 1, 1 },
			{ 0, 1, 1, 1, 1, 1, 1 }, { 0, 1, 1, 1, 1, 1, 1 },
			{ 0, 1, 1, 1, 1, 1, 1 }, { 0, 1, 1, 1, 1, 1, 1 },
			{ 0, 0, 0, 0, 0, 0, 0 }, };

	static int[][] rand14dfilltable = new int[][] { { 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 1, 1, 1, 1, 1, 1 }, { 0, 1, 1, 1, 1, 1, 1 },
			{ 0, 1, 1, 1, 1, 1, 1 }, { 0, 1, 1, 1, 1, 1, 1 },
			{ 0, 1, 1, 1, 1, 1, 1 }, { 0, 1, 1, 1, 1, 1, 1 }, };

	static int[][] rand16filltable = new int[][] { { 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 1, 1, 1, 1, 1, 1, 1 }, { 0, 1, 1, 1, 1, 1, 1, 1 },
			{ 0, 1, 1, 1, 1, 1, 1, 1 }, { 0, 1, 1, 1, 1, 1, 1, 1 },
			{ 0, 1, 1, 1, 1, 1, 1, 1 }, { 0, 1, 1, 1, 1, 1, 1, 1 },
			{ 0, 1, 1, 1, 1, 1, 1, 1 }, { 0, 1, 1, 1, 1, 1, 1, 1 },
			{ 0, 1, 1, 1, 1, 1, 1, 1 }, { 0, 1, 1, 1, 1, 1, 1, 1 },
			{ 0, 1, 1, 1, 1, 1, 1, 1 }, { 0, 1, 1, 1, 1, 1, 1, 1 },
			{ 0, 1, 1, 1, 1, 1, 1, 1 }, { 0, 1, 1, 1, 1, 1, 1, 1 },
			{ 0, 0, 0, 0, 0, 0, 0, 0 }, };

	// -----------------------------------------
	// anim tables
	// -----------------------------------------

	static int[][][] rand10walkanimtable = new int[][][] {
			{ { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 5, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 5, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 5, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 5, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 5, 0, 0, 0, 0, 0, 0, 0 },
					{ 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
					{ 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
					{ 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 }, },
			{ { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 1, 1, 1, 1, 1 },
					{ 0, 0, 0, 0, 0, 1, 1, 1, 1, 1 },
					{ 0, 0, 0, 0, 0, 1, 1, 1, 1, 1 }, } };

	static int[][][] rand10rwalkanimtable = new int[][][] {
			{ { 0, 0, 3, 3, 3, 3, 3, 7, 7, 7 },
					{ 0, 0, 3, 3, 3, 3, 3, 7, 7, 7 },
					{ 0, 0, 3, 3, 3, 3, 3, 7, 7, 7 },
					{ 0, 0, 0, 0, 0, 0, 0, 7, 7, 7 },
					{ 0, 0, 0, 0, 0, 0, 0, 7, 7, 7 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, },
			{ { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 7, 7, 7 },
					{ 0, 0, 0, 0, 0, 0, 0, 7, 7, 7 },
					{ 0, 0, 0, 0, 0, 0, 0, 7, 7, 7 },
					{ 0, 0, 3, 3, 3, 3, 3, 7, 7, 7 },
					{ 0, 0, 3, 3, 3, 3, 3, 7, 7, 7 },
					{ 0, 0, 3, 3, 3, 3, 3, 7, 7, 7 }, } };

	static int[][][] rand10flyanimtable = new int[][][] {
			{ { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, },
			{ { 3, 3, 3, 0, 0, 0, 0, 7, 7, 7 },
					{ 3, 3, 3, 0, 0, 0, 0, 7, 7, 7 },
					{ 3, 3, 3, 0, 0, 0, 0, 7, 7, 7 },
					{ 3, 3, 3, 0, 0, 0, 0, 7, 7, 7 },
					{ 3, 3, 3, 0, 0, 0, 0, 7, 7, 7 },
					{ 3, 3, 3, 0, 0, 0, 0, 7, 7, 7 },
					{ 3, 3, 3, 0, 0, 0, 0, 7, 7, 7 },
					{ 3, 3, 3, 0, 0, 0, 0, 7, 7, 7 },
					{ 3, 3, 3, 0, 0, 0, 0, 7, 7, 7 },
					{ 3, 3, 3, 0, 0, 0, 0, 7, 7, 7 }, },
			{ { B, B, 3, 3, 0, 0, 7, 7, F, F },
					{ B, B, 3, 3, 0, 0, 7, 7, F, F },
					{ B, B, 3, 3, 0, 0, 7, 7, F, F },
					{ B, B, B, 3, 0, 0, 7, F, F, F },
					{ B, B, B, 3, 0, 0, 7, F, F, F },
					{ B, B, B, 3, 0, 0, 7, F, F, F },
					{ B, B, B, 3, 0, 0, 7, F, F, F },
					{ B, B, 3, 3, 0, 0, 7, 7, F, F },
					{ B, B, 3, 3, 0, 0, 7, 7, F, F },
					{ B, B, 3, 3, 0, 0, 7, 7, F, F }, },
			{ { 3, 3, 3, 0, 0, 0, 0, 7, 7, 7 },
					{ 3, 3, 3, 0, 0, 0, 0, 7, 7, 7 },
					{ 3, 3, 3, 0, 0, 0, 0, 7, 7, 7 },
					{ 3, 3, 3, 0, 0, 0, 0, 7, 7, 7 },
					{ 3, 3, 3, 0, 0, 0, 0, 7, 7, 7 },
					{ 3, 3, 3, 0, 0, 0, 0, 7, 7, 7 },
					{ 3, 3, 3, 0, 0, 0, 0, 7, 7, 7 },
					{ 3, 3, 3, 0, 0, 0, 0, 7, 7, 7 },
					{ 3, 3, 3, 0, 0, 0, 0, 7, 7, 7 },
					{ 3, 3, 3, 0, 0, 0, 0, 7, 7, 7 }, } };

	static int[][][] rand12turnanimtable = new int[][][] {
			{ { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, },
			{ { 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8 },
					{ 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8 },
					{ 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8 },
					{ 6, 6, 6, 6, 6, 7, 7, 8, 8, 8, 8, 8 },
					{ 5, 5, 5, 6, 6, 7, 7, 8, 8, 1, 1, 1 },
					{ 5, 5, 5, 5, 5, 7, 7, 1, 1, 1, 1, 1 },
					{ 5, 5, 5, 5, 5, 3, 3, 1, 1, 1, 1, 1 },
					{ 5, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1, 1 },
					{ 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2 },
					{ 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2 },
					{ 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2 },
					{ 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2 }, },
			{ { D, D, E, E, F, F, F, F, F, F, F, F },
					{ D, D, E, E, F, F, F, F, F, F, F, F },
					{ D, D, E, E, F, F, F, F, G, G, G, G },
					{ D, D, E, E, E, F, F, G, G, G, G, G },
					{ D, D, D, E, E, F, F, G, G, 9, 9, 9 },
					{ D, D, D, D, D, F, F, 9, 9, 9, 9, 9 },
					{ D, D, D, D, D, B, B, 9, 9, 9, 9, 9 },
					{ D, D, D, C, C, B, B, A, A, 9, 9, 9 },
					{ C, C, C, C, C, B, B, A, A, A, 9, 9 },
					{ C, C, C, C, B, B, B, B, A, A, 9, 9 },
					{ B, B, B, B, B, B, B, B, A, A, 9, 9 },
					{ B, B, B, B, B, B, B, B, A, A, 9, 9 }, },
			{ { B, B, B, B, B, B, B, B, C, C, D, D },
					{ B, B, B, B, B, B, B, B, C, C, D, D },
					{ A, A, A, A, B, B, B, B, C, C, D, D },
					{ A, A, A, A, A, B, B, C, C, C, D, D },
					{ 9, 9, 9, A, A, B, B, C, C, D, D, D },
					{ 9, 9, 9, 9, 9, B, B, D, D, D, D, D },
					{ 9, 9, 9, 9, 9, F, F, D, D, D, D, D },
					{ 9, 9, 9, G, G, F, F, E, E, D, D, D },
					{ 9, 9, G, G, G, F, F, E, E, E, E, E },
					{ 9, 9, G, G, F, F, F, F, E, E, E, E },
					{ 9, 9, G, G, F, F, F, F, F, F, F, F },
					{ 9, 9, G, G, F, F, F, F, F, F, F, F }, },
			{ { 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4 },
					{ 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4 },
					{ 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4 },
					{ 2, 2, 2, 2, 2, 3, 3, 4, 4, 4, 4, 4 },
					{ 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5 },
					{ 1, 1, 1, 1, 1, 3, 3, 5, 5, 5, 5, 5 },
					{ 1, 1, 1, 1, 1, 7, 7, 5, 5, 5, 5, 5 },
					{ 1, 1, 1, 8, 8, 7, 7, 6, 6, 5, 5, 5 },
					{ 8, 8, 8, 8, 8, 7, 7, 6, 6, 6, 6, 6 },
					{ 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6 },
					{ 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6 },
					{ 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6 }, } };

	static int[][][] rand12walkanimtable = new int[][][] {
			{ { 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0 },
					{ 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0 },
					{ 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0 },
					{ 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0 }, },
			{ { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 },
					{ 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 },
					{ 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 },
					{ 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 }, } };

	static int[][][] rand12rwalkanimtable = new int[][][] {
			{ { 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7 },
					{ 0, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7 },
					{ 0, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7 },
					{ 0, 0, 0, 3, 3, 3, 3, 0, 7, 7, 7, 7 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, },
			{ { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 0, 0, 0, 3, 3, 3, 3, 0, 7, 7, 7, 7 },
					{ 0, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7 },
					{ 0, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7 }, } };

	static int[][][] rand12flyanimtable = new int[][][] {
			{ { 5, 5, 5, 0, 0, 0, 0, 0, 0, 5, 5, 5 },
					{ 5, 5, 5, 0, 0, 0, 0, 0, 0, 5, 5, 5 },
					{ 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 },
					{ 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1 },
					{ 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1 }, },
			{ { 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 0, 3, 3, 3, 0, 0, 0, 0, 7, 7, 7, 0 },
					{ 0, 0, 3, 3, 0, 0, 0, 0, 7, 7, 0, 0 },
					{ 0, 0, 3, 3, 0, 0, 0, 0, 7, 7, 0, 0 },
					{ 0, 3, 3, 3, 0, 0, 0, 0, 7, 7, 7, 0 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7 }, },
			{ { B, B, B, B, B, 3, 7, F, F, F, F, F },
					{ B, B, B, B, 3, 0, 0, 7, F, F, F, F },
					{ B, B, B, 3, 3, 0, 0, 7, 7, F, F, F },
					{ B, B, B, 3, 3, 0, 0, 7, 7, F, F, F },
					{ 3, B, B, 3, 3, 0, 0, 7, 7, F, F, 7 },
					{ 3, 3, B, 3, 3, 0, 0, 7, 7, F, 7, 7 },
					{ 3, 3, B, 3, 3, 0, 0, 7, 7, F, 7, 7 },
					{ 3, B, B, 3, 3, 0, 0, 7, 7, F, F, 7 },
					{ B, B, B, 3, 3, 0, 0, 7, 7, F, F, F },
					{ B, B, B, 3, 3, 0, 0, 7, 7, F, F, F },
					{ B, B, B, B, 3, 0, 0, 7, F, F, F, F },
					{ B, B, B, B, B, 3, 7, F, F, F, F, F }, },
			{ { 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 0, 3, 3, 3, 0, 0, 0, 0, 7, 7, 7, 0 },
					{ 0, 0, 3, 3, 0, 0, 0, 0, 7, 7, 0, 0 },
					{ 0, 0, 3, 3, 0, 0, 0, 0, 7, 7, 0, 0 },
					{ 0, 3, 3, 3, 0, 0, 0, 0, 7, 7, 7, 0 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 0, 0, 7, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7 }, } };

	static int[][][] rand12crawlanimtable = new int[][][] {
			{ { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, },
			{ { 0, 0, 0, 7, 7, 7, 7, 7, 6, 6, 6, 6 },
					{ 0, 0, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6 },
					{ 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6 },
					{ 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0 },
					{ 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0 },
					{ 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 0, 0 },
					{ 2, 2, 2, 2, 3, 3, 3, 3, 3, 0, 0, 0 }, },
			{ { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, },
			{ { 4, 4, 4, 4, 3, 3, 3, 3, 3, 0, 0, 0 },
					{ 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 0, 0 },
					{ 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0 },
					{ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 },
					{ 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8 },
					{ 0, 0, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8 },
					{ 0, 0, 0, 7, 7, 7, 7, 7, 8, 8, 8, 8 }, } };

	static int[][][] rand12rcrawlanimtable = rotateAnimTable(rand12crawlanimtable);

	static int[][][] rand12bubbleanimtable = new int[][][] {
			{ { 3, 2, 2, 2, 1, 1, 1, 1, 8, 8, 8, 7 },
					{ 3, 3, 2, 2, 1, 1, 1, 1, 8, 8, 7, 7 },
					{ 3, 3, 3, 2, 2, 1, 1, 8, 8, 7, 7, 7 },
					{ 3, 3, 3, 3, 2, 1, 1, 8, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 4, 5, 5, 6, 7, 7, 7, 7 },
					{ 3, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 7 },
					{ 3, 3, 4, 4, 5, 5, 5, 5, 6, 6, 7, 7 },
					{ 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 7 }, },
			{ { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, },
			{ { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
					{ 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4 },
					{ 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4 },
					{ 6, 6, 6, 5, 5, 5, 5, 5, 5, 4, 4, 4 },
					{ 7, 7, 6, 6, 0, 0, 0, 0, 4, 4, 3, 3 },
					{ 7, 7, 7, 7, 0, 0, 0, 0, 3, 3, 3, 3 },
					{ 7, 7, 7, 7, 0, 0, 0, 0, 3, 3, 3, 3 },
					{ 7, 7, 8, 8, 0, 0, 0, 0, 2, 2, 3, 3 },
					{ 8, 8, 8, 1, 1, 1, 1, 1, 1, 2, 2, 2 },
					{ 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2 },
					{ 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2 },
					{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, },
			{ { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, } };

	static int[][][] rand12nullanimtable = new int[][][] { {
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, } };

	static int[][][] rotateAnimTable(int[][][] t) {
		int lz = t.length;
		int ly = t[0].length;
		int lx = t[0][0].length;
		int[][][] ret = new int[lz][lx][ly];
		for (int z = 0; z < lz; z++) {
			for (int y = 0; y < ly; y++) {
				for (int x = 0; x < lx; x++) {
					int v = t[z][y][x];
					if (v >= 1 && v <= 8) {
						v += 2;
						if (v > 8)
							v -= 8;
					}
					if (v >= 9 && v <= G) {
						v += 2;
						if (v > G)
							v -= 8;
					}
					ret[z][x][y] = v;

				}
			}
		}
		return ret;
	}

	static int[][][] rand12bendanimtable = new int[][][] {
			{ { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, },
			{ { 6, 6, 6, 7, 7, 7, 7, 7, F, F, F, F },
					{ 6, 6, 6, 7, 7, 7, 7, 7, 7, F, F, F },
					{ 0, 6, 6, 6, 7, 7, 7, 7, 7, 7, F, F },
					{ 0, 0, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 0, 0, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7 },
					{ 0, 8, 8, 8, 7, 7, 7, 7, 7, 7, F, F },
					{ 8, 8, 8, 7, 7, 7, 7, 7, 7, F, F, F },
					{ 8, 8, 8, 7, 7, 7, 7, 7, F, F, F, F }, },
			{ { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, },
			{ { B, B, B, B, 3, 3, 3, 3, 3, 4, 4, 4 },
					{ B, B, B, 3, 3, 3, 3, 3, 3, 4, 4, 4 },
					{ B, B, 3, 3, 3, 3, 3, 3, 4, 4, 4, 0 },
					{ 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 0, 0 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 0, 0 },
					{ B, B, 3, 3, 3, 3, 3, 3, 2, 2, 2, 0 },
					{ B, B, B, 3, 3, 3, 3, 3, 2, 2, 2, 2 },
					{ B, B, B, B, 3, 3, 3, 3, 3, 2, 2, 2 }, } };

	static int[][][] rand12pokeanimtable = new int[][][] {
			{ { 0, 0, 0, 0, 0, 0, 0, 7, 7, 6, 6, 6 },
					{ 0, 0, 0, 0, 0, 0, 0, 7, 6, 6, 6, 6 },
					{ 0, 0, 0, 0, 0, 0, 7, 6, 6, 6, 6, 6 },
					{ 0, 0, 0, 0, 0, 0, 7, 6, 6, 6, 6, 5 },
					{ 0, 0, 0, 0, 0, 0, 7, 6, 6, 6, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0 },
					{ 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
					{ 1, 1, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0 },
					{ 1, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0 },
					{ 2, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0 },
					{ 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0 },
					{ 2, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0 }, },
			{ { 4, 4, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 4, 4, 4, 4, 3, 0, 0, 0, 0, 0, 0, 0 },
					{ 4, 4, 4, 4, 4, 3, 0, 0, 0, 0, 0, 0 },
					{ 5, 4, 4, 4, 4, 3, 0, 0, 0, 0, 0, 0 },
					{ 5, 5, 4, 4, 4, 3, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 7, 8, 8, 8, 1, 1 },
					{ 0, 0, 0, 0, 0, 0, 7, 8, 8, 8, 8, 1 },
					{ 0, 0, 0, 0, 0, 0, 7, 8, 8, 8, 8, 8 },
					{ 0, 0, 0, 0, 0, 0, 0, 7, 8, 8, 8, 8 },
					{ 0, 0, 0, 0, 0, 0, 0, 7, 7, 8, 8, 8 }, } };

	static int[][][] rand12wiggleanimtable = new int[][][] {
			{ { 3, 3, 0, 0, 0, 0, 0, 7, 7, 7, 7, F },
					{ 3, 3, 3, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 7, 7, 7 },
					{ B, 3, 3, 3, 3, 0, 0, 0, 0, 0, 7, 7 },
					{ B, B, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0 },
					{ B, B, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0 },
					{ B, 3, 3, 3, 3, 0, 0, 0, 0, 0, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 7, 7, 7 },
					{ 3, 3, 3, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 0, 0, 0, 0, 0, 7, 7, 7, 7, F },
					{ 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, F, F },
					{ 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, F, F }, },
			{ { 3, 3, 0, 0, 0, 0, 0, 7, 7, 7, 7, F },
					{ 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, F, F },
					{ 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, F, F },
					{ 3, 3, 0, 0, 0, 0, 0, 7, 7, 7, 7, F },
					{ 3, 3, 3, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 7, 7, 7 },
					{ B, 3, 3, 3, 3, 0, 0, 0, 0, 0, 7, 7 },
					{ B, B, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0 },
					{ B, B, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0 },
					{ B, 3, 3, 3, 3, 0, 0, 0, 0, 0, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 7, 7, 7 },
					{ 3, 3, 3, 0, 0, 0, 0, 0, 7, 7, 7, 7 }, },
			{ { B, 3, 3, 3, 3, 0, 0, 0, 0, 0, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 7, 7, 7 },
					{ 3, 3, 3, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 0, 0, 0, 0, 0, 7, 7, 7, 7, F },
					{ 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, F, F },
					{ 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, F, F },
					{ 3, 3, 0, 0, 0, 0, 0, 7, 7, 7, 7, F },
					{ 3, 3, 3, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 7, 7, 7 },
					{ B, 3, 3, 3, 3, 0, 0, 0, 0, 0, 7, 7 },
					{ B, B, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0 },
					{ B, B, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0 }, },
			{ { B, 3, 3, 3, 3, 0, 0, 0, 0, 0, 7, 7 },
					{ B, B, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0 },
					{ B, B, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0 },
					{ B, 3, 3, 3, 3, 0, 0, 0, 0, 0, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 7, 7, 7 },
					{ 3, 3, 3, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 0, 0, 0, 0, 0, 7, 7, 7, 7, F },
					{ 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, F, F },
					{ 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, F, F },
					{ 3, 3, 0, 0, 0, 0, 0, 7, 7, 7, 7, F },
					{ 3, 3, 3, 0, 0, 0, 0, 0, 7, 7, 7, 7 },
					{ 3, 3, 3, 3, 0, 0, 0, 0, 0, 7, 7, 7 }, } };

	static int[][][] rand12bounceanimtable = new int[][][] {
			{ { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7 },
					{ 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7 },
					{ 3, 3, 3, 0, 0, 0, 0, 0, 0, 7, 7, 7 },
					{ 3, 3, 3, 0, 0, 0, 0, 0, 0, 7, 7, 7 },
					{ 3, 3, 3, 0, 0, 0, 0, 0, 0, 7, 7, 7 },
					{ 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7 },
					{ 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, },
			{ { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
					{ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
					{ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
					{ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
					{ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
					{ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
					{ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, },
			{ { D, D, D, D, D, D, D, D, D, D, D, D },
					{ D, D, D, D, D, D, D, D, D, D, D, D },
					{ D, D, D, D, D, D, D, D, D, D, D, D },
					{ D, D, D, D, D, D, D, D, D, D, D, D },
					{ D, D, D, D, D, D, D, D, D, D, D, D },
					{ D, D, D, D, D, D, D, D, D, D, D, D },
					{ 5, 6, 6, 5, 5, 5, 5, 5, 5, 4, 4, 5 },
					{ 5, 6, 6, 5, 5, 5, 5, 5, 5, 4, 4, 5 },
					{ 5, 6, 6, 5, 5, 5, 5, 5, 5, 4, 4, 5 },
					{ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, },
			{ { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
					{ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
					{ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
					{ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
					{ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
					{ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
					{ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, } };

	static int[][][] rand12rwiggleanimtable = rotateAnimTable(rand12wiggleanimtable);
	
	static Random random = new Random();
	public static void fixRandom(int seed){
		random = new Random(seed);
	}
	
	// hull code:
	// 0 = transparent
	// 1 = any colour
	// 2 = any colour
	// 4 = always black

	// render parameters as part of type (instance variables)

	int xsize = 16;
	int ysize = 16;

	int[][] filltable;

	int[][][] animtable;

	boolean flipx = true, flipy = false;

	public final static int NONE = 0;
	public final static int BEVEL = 1;
	public final static int GOURAUD = 2;
	int shading = NONE;

	// note: xshadingfac+yshadingfac must be <= 2
	// 0=no shading 1=darken 2=darken more
	int xshadingfac = 0;
	// 0=no shading 1=darken 2=darken more
	int yshadingfac = 0;

	// probability of filling pixel
	double fill_prob = 0.6;
	// probability that a pixel is filled the same as its neighbours
	double fill_smoothing = 0.2;
	// balance between taking horizontal versus vertical neighbours
	double fill_smoothing_horiz_bias = 0.8;

	// probability of black pixel if enabled
	double black_prob = 0.2;
	// probability of highlight pixel if enabled
	double highlight_prob = 0.4;
	// probability that a colour (non-black) pixel is taken from neighbour
	double color_smoothing = 0.7;
	// balance between taking horizontal versus vertical neighbours
	double color_smoothing_horiz_bias = 0.5;

	public static PixelArtGen[] shapes = new PixelArtGen[] {
			new PixelArtGen(16, 16, shipfilltable, null, true, false, 1, 1,
					0.5, 0.6, 0.5, 0.3, 0.4, 0.6, 0.5),
			new PixelArtGen(18, 18, butterflyfilltable18, birdanimtable18,
					true, false, 1, 1, 0.5, 0.7, 0.5, 0.3, 0.4, 0.6, 0.5),
			new PixelArtGen(18, 18, manfilltable18, mananimtable18, true,
					false, 1, 1, 0.5, 0.6, 0.5, 0.3, 0.4, 0.6, 0.5),
			new PixelArtGen(18, 18, ufofilltable18, null, true, true, 1, 1,
					0.5, 0.75, 0.5, 0.3, 0.4, 0.8, 0.5) };

	public static PixelArtGen[] shapes2 = new PixelArtGen[] {
			new PixelArtGen(12, 12, rand12filltable, rand12walkanimtable, true,
					false, 0, 0, 0.6, 0.2, 0.5, 0.3, 0.4, 0.3, 0.5),
			new PixelArtGen(12, 12, rand12filltable, rand12flyanimtable, true,
					false, 0, 0, 0.6, 0.2, 0.5, 0.3, 0.4, 0.3, 0.5),
			new PixelArtGen(12, 12, rand12filltable, rand12rcrawlanimtable,
					true, false, 0, 0, 0.6, 0.2, 0.5, 0.3, 0.4, 0.3, 0.5),
			new PixelArtGen(12, 12, rand12filltable, rand12crawlanimtable,
					true, false, 0, 0, 0.6, 0.2, 0.5, 0.3, 0.4, 0.3, 0.5),
			new PixelArtGen(12, 12, rand12filltable, rand12bendanimtable, true,
					false, 0, 0, 0.6, 0.2, 0.5, 0.3, 0.4, 0.3, 0.5),
			new PixelArtGen(12, 12, rand12filltable, rand12bubbleanimtable,
					true, false, 0, 0, 0.6, 0.2, 0.5, 0.3, 0.4, 0.3, 0.5),
			new PixelArtGen(12, 12, rand12filltable, rand12pokeanimtable, true,
					false, 0, 0, 0.6, 0.2, 0.5, 0.3, 0.4, 0.3, 0.5),
			new PixelArtGen(12, 12, rand12yfilltable, rand12rwalkanimtable,
					false, true, 0, 0, 0.6, 0.2, 0.5, 0.3, 0.4, 0.3, 0.5),
			new PixelArtGen(12, 12, rand12yfilltable, rand12crawlanimtable,
					false, true, 0, 0, 0.6, 0.2, 0.5, 0.3, 0.4, 0.3, 0.5),
			new PixelArtGen(12, 12, rand12yfilltable, rand12bendanimtable,
					false, true, 0, 0, 0.6, 0.2, 0.5, 0.3, 0.4, 0.3, 0.5),
			new PixelArtGen(12, 12, rand12yfilltable, rand12bubbleanimtable,
					false, true, 0, 0, 0.6, 0.2, 0.5, 0.3, 0.4, 0.3, 0.5),
			new PixelArtGen(12, 12, rand12yfilltable, rand12pokeanimtable,
					false, true, 0, 0, 0.6, 0.2, 0.5, 0.3, 0.4, 0.3, 0.5),
			new PixelArtGen(12, 12, rand12dfilltable, rand12turnanimtable,
					true, true, 0, 0, 0.6, 0.2, 0.5, 0.3, 0.4, 0.3, 0.5),
			new PixelArtGen(12, 12, rand12dfilltable, rand12bendanimtable,
					true, true, 0, 0, 0.6, 0.2, 0.5, 0.3, 0.4, 0.3, 0.5),
			new PixelArtGen(12, 12, rand12dfilltable, rand12crawlanimtable,
					true, true, 0, 0, 0.6, 0.2, 0.5, 0.3, 0.4, 0.3, 0.5),
			new PixelArtGen(12, 12, rand12dfilltable, rand12bubbleanimtable,
					true, true, 0, 0, 0.6, 0.2, 0.5, 0.3, 0.4, 0.3, 0.5),
			new PixelArtGen(12, 12, rand12dfilltable, rand12pokeanimtable,
					true, true, 0, 0, 0.6, 0.2, 0.5, 0.3, 0.4, 0.3, 0.5),
			new PixelArtGen(12, 12, rand12filltable, rand12wiggleanimtable,
					true, false, 0, 0, 0.6, 0.2, 0.5, 0.3, 0.4, 0.3, 0.5),
			new PixelArtGen(12, 12, rand12yfilltable, rand12rwiggleanimtable,
					false, true, 0, 0, 0.6, 0.2, 0.5, 0.3, 0.4, 0.3, 0.5),
			new PixelArtGen(12, 12, rand12filltable, rand12bounceanimtable,
					true, false, 0, 0, 0.6, 0.2, 0.5, 0.3, 0.4, 0.3, 0.5),
			new PixelArtGen(12, 12, rand12dfilltable, rand12bounceanimtable,
					true, true, 0, 0, 0.6, 0.2, 0.5, 0.3, 0.4, 0.3, 0.5),
			new PixelArtGen(12, 12, rand12filltable, rand12nullanimtable, true,
					false, 0, 0, 0.6, 0.2, 0.5, 0.3, 0.4, 0.3, 0.5),
			new PixelArtGen(12, 12, rand12dfilltable, rand12nullanimtable,
					true, true, 0, 0, 0.6, 0.2, 0.5, 0.3, 0.4, 0.3, 0.5), };

	public PixelArtGen(int xsize, int ysize, int[][] filltable,
			int[][][] animtable, boolean flipx, boolean flipy, int xshadingfac,
			int yshadingfac, double fill_prob, double fill_smoothing,
			double fill_smoothing_horiz_bias, double black_prob,
			double highlight_prob, double color_smoothing,
			double color_smoothing_horiz_bias) {
		this.xsize = xsize;
		this.ysize = ysize;
		this.filltable = filltable;
		this.animtable = animtable;
		this.flipx = flipx;
		this.flipy = flipy;
		this.xshadingfac = xshadingfac;
		this.yshadingfac = yshadingfac;
		this.fill_prob = fill_prob;
		this.fill_smoothing = fill_smoothing;
		this.fill_smoothing_horiz_bias = fill_smoothing_horiz_bias;
		this.black_prob = black_prob;
		this.highlight_prob = highlight_prob;
		this.color_smoothing = color_smoothing;
		this.color_smoothing_horiz_bias = color_smoothing_horiz_bias;
		if (this.shading == BEVEL) {
			this.xshadingfac = 0;
			this.yshadingfac = 0;
			// highlight_prob = 0;
		}
		if (this.shading == GOURAUD) {
			highlight_prob = 0;
		}
	}

	public static void main(String[] args) throws IOException {
		while (true) {
			int shapetype = (int) (Math.random() * shapes.length);
			int[] coltable = coltables[(int) (Math.random() * coltables.length)];
			PixelArtGen shape = shapes[shapetype];
			Sprite sprite1 = shape.createSprite(coltable);
			ImageTools.writePPM("a.ppm", sprite1.pixels, sprite1.pixels.length,
					sprite1.pixels[0].length);
			Sprite[] mutant = new Sprite[20];
			BufferedReader in = new BufferedReader(new InputStreamReader(
					System.in));
			while (true) {
				for (int i = 0; i < mutant.length; i++) {
					Sprite sprite2 = shape.createSprite(coltable);
					// writePPM("a"+i+".ppm",
					// sprite2.pixels,sprite2.pixels.length,sprite2.pixels[0].length);
					mutant[i] = shape.mergeSprites(sprite1, sprite2, 0.8);
					ImageTools
							.writePPM("a" + i + ".ppm", mutant[i].pixels,
									mutant[i].pixels.length,
									mutant[i].pixels[0].length);
					execNoShit("pnmtopng -transparent rgb:01/01/01 <a" + i
							+ ".ppm " + ">a" + i + ".png; rm a" + i + ".ppm");
				}
				int nr = -1;
				try {
					nr = Integer.parseInt(in.readLine());
				} catch (Exception e) {
					System.out.println("Re-run");
					continue;
				}
				if (nr < 0) {
					System.out.println("New sprite");
					break;
				}
				System.out.println("Mutating: " + nr);
				sprite1 = mutant[nr];
			}
		}
	}

	static int execNoShit(String cmd) {
		try {
			String[] shc = new String[] { "sh", "-c", cmd };
			Runtime rt = Runtime.getRuntime();
			Process ps = rt.exec(shc);
			ps.waitFor();
			return ps.exitValue();
		} catch (Exception e) {
			e.printStackTrace();
			return -1;
		}
	}

	public static int[][] createTransparentBitmap(int xsize, int ysize) {
		int[][] pixels = new int[xsize][ysize];
		for (int i = 0; i < xsize; i++) {
			for (int j = 0; j < ysize; j++) {
				pixels[i][j] = transcolor;
			}
		}
		return pixels;
	}

	public static void addOutline(int[][] hull) {
		for (int x = 0; x < hull.length; x++) {
			for (int y = 0; y < hull[x].length; y++) {
				boolean neigh = false;
				neigh = neigh || x > 0 && (hull[x - 1][y] & 3) == 2;
				neigh = neigh || x < hull.length - 1
						&& (hull[x + 1][y] & 3) == 2;
				neigh = neigh || y > 0 && (hull[x][y - 1] & 3) == 2;
				neigh = neigh || y < hull[x].length - 1
						&& (hull[x][y + 1] & 3) == 2;
				if (neigh && hull[x][y] == 0)
					hull[x][y] = 3;
			}
		}
	}

	public static void addOutlineRGB(int[][] pixels) {
		for (int x = 0; x < pixels.length; x++) {
			for (int y = 0; y < pixels[x].length; y++) {
				boolean neigh = false;
				neigh = neigh || x > 0 && pixels[x - 1][y] != transcolor
						&& pixels[x - 1][y] != 0;
				neigh = neigh || x < pixels.length - 1
						&& pixels[x + 1][y] != transcolor
						&& pixels[x + 1][y] != 0;
				neigh = neigh || y > 0 && pixels[x][y - 1] != transcolor
						&& pixels[x][y - 1] != 0;
				neigh = neigh || y < pixels[x].length - 1
						&& pixels[x][y + 1] != transcolor
						&& pixels[x][y + 1] != 0;
				if (neigh && pixels[x][y] == transcolor)
					pixels[x][y] = 0;
				if (!neigh && pixels[x][y] == 0)
					pixels[x][y] = transcolor;
			}
		}
	}

	/** Weight is probability of using sprite 1. Store results in spr1. */
	public Sprite mergeSprites(Sprite spr1, Sprite spr2, double weight) {
		Sprite spr = new Sprite(spr1.coltable, spr1.gen, xsize,
				spr1.pixels.length, ysize);
		int xmax = flipx ? xsize / 2 : xsize;
		int ymax = flipy ? ysize / 2 : ysize;
		for (int y = 0; y < ymax; y++) {
			for (int x = 0; x < xmax; x++) {
				if (Math.random() > weight) {
					spr.colidx[x][y] = spr2.colidx[x][y];
				} else {
					spr.colidx[x][y] = spr1.colidx[x][y];
				}
			}
		}
		flipAndShade(spr);
		indexToRGB(spr);
		animate(spr);
		addOutlineRGB(spr.pixels);
		return spr;
	}

	public Sprite createSprite(int[] coltable) {
		int xmax = flipx ? xsize / 2 : xsize;
		int ymax = flipy ? ysize / 2 : ysize;
		int totalxsize = animtable == null ? xsize : xsize
				* (animtable.length + 1);
		Sprite spr = new Sprite(coltable, this, xsize, totalxsize, ysize);
		// decide which parts of hull to fill:
		// * main fill type 1 -> 2
		// * add outline
		for (int y = 0; y < ymax; y++) {
			for (int x = 0; x < xmax; x++) {
				int filltype = filltable[y][x];
				int filltype_main = (filltype & 3);
				int filltype_fill = ((filltype & 12) | 2);
				if (filltype_main == 1) {
					// smooth = get colour from neighbouring pixel
					if (Math.random() < fill_smoothing) {
						int above = 0, left = 0, chosen = 0;
						if (x > 0)
							left = (spr.hull[x - 1][y] & 3) == 2 ? 1 : 0;
						if (y > 0)
							above = (spr.hull[x][y - 1] & 3) == 2 ? 1 : 0;
						if (above == 0 && left == 0) {
							chosen = 0;
						} else if (above != 0 && left == 0) {
							chosen = above;
						} else if (above == 0 && left != 0) {
							chosen = left;
						} else if (above != 0 && left != 0) {
							if (Math.random() > fill_smoothing_horiz_bias) {
								chosen = above;
							} else {
								chosen = left;
							}
						}
						if (chosen != 0)
							spr.hull[x][y] = filltype_fill;
					} else {
						if (Math.random() > fill_prob)
							spr.hull[x][y] = filltype_fill;
					}
				} else if (filltype_main == 2) {
					spr.hull[x][y] = filltype_fill;
				} else if (filltype_main == 3) {
					spr.hull[x][y] = 3;
				}
			}
		}
		// addOutline(spr.hull);
		// colour fill type is handled by colorize
		colorize(spr);
		flipAndShade(spr);
		if (shading == BEVEL)
			bevelShadeNew(spr);
		if (shading == GOURAUD)
			gouraudShade(spr);
		indexToRGB(spr);
		animate(spr);
		addOutlineRGB(spr.pixels);
		// colorizeShade(pixels,spr.hull);
		return spr;
	}

	public void colorize(Sprite spr) {
		int xmax = flipx ? xsize / 2 : xsize;
		int ymax = flipy ? ysize / 2 : ysize;
		int white = spr.coltable.length / 3 - 1;
		for (int y = 0; y < ymax; y++) {
			for (int x = 0; x < xmax; x++) {
				int colnr = 0;
				int filltype = spr.hull[x][y];
				if ((filltype & 3) == 3) { // outline
					colnr = 1;
				} else if ((filltype & 3) == 2) { // normal fill
					if ((filltype & 4) == 4) { // black enabled
						if (Math.random() < black_prob) {
							colnr = 1; // black
						} else {
							if ((filltype & 8) == 8) { // highlight enabled
								if (Math.random() < highlight_prob) {
									colnr = white;
								} else {
									// any colour except black and highlight
									colnr = (int) (2 + Math.random()
											* (spr.coltable.length / 3 - 3));
								}
							}
						}
					} else if ((filltype & 8) == 8) { // highlight enabled
						if (Math.random() < highlight_prob) {
							colnr = white;
						} else {
							// any colour except black and highlight
							colnr = (int) (2 + Math.random()
									* (spr.coltable.length / 3 - 3));
						}
					} else { // any colour except black and highlight
						// NOTE: previously highlight was also enabled but with
						// normal probability
						colnr = (int) (2 + Math.random()
								* (spr.coltable.length / 3 - 3));
					}
					// XXX both black and highlight not supported
					// smooth = get colour from neighbouring pixel
					if (colnr > 1 && Math.random() < color_smoothing) {
						int above = 0, left = 0, chosen = 0;
						if (x > 0)
							left = spr.colidx[x - 1][y] / 3;
						if (y > 0)
							above = spr.colidx[x][y - 1] / 3;
						if (above == 0 && left == 0) {
							chosen = 0;
						} else if (above != 0 && left == 0) {
							chosen = above;
						} else if (above == 0 && left != 0) {
							chosen = left;
						} else if (above != 0 && left != 0) {
							if (Math.random() > color_smoothing_horiz_bias) {
								chosen = above;
							} else {
								chosen = left;
							}
						}
						if (chosen > 1)
							colnr = chosen;
					}
				}
				spr.colidx[x][y] = colnr * 3;
			}
		}
	}

	/** flip according to symmetry axes and shade */
	public void flipAndShade(Sprite spr) {
		for (int y = 0; y < ysize; y++) {
			for (int x = 0; x < xsize; x++) {
				int colnr = spr.colidx[x][y];
				if (flipx && x < xsize / 2) {
					spr.colidx[xsize - x - 1][y] = colnr + xshadingfac;
				}
				if (flipy && y < ysize / 2) {
					spr.colidx[x][ysize - y - 1] = colnr + yshadingfac;
				}
				if (flipx && flipy && x < xsize / 2 && y < ysize / 2) {
					spr.colidx[xsize - x - 1][ysize - y - 1] = colnr
							+ xshadingfac + yshadingfac;
				}
			}
		}
		// if (shading==BEVEL) colorizeShadeAdd(spr);
	}

	public void indexToRGB(Sprite spr) {
		for (int x = 0; x < xsize; x++) {
			for (int y = 0; y < ysize; y++) {
				spr.pixels[x][y] = spr.coltable[spr.colidx[x][y]];
			}
		}
	}

	public void colorizeShadeAdd(Sprite spr) {
		// shade given colours
		for (int y = 0; y < ysize; y++) {
			for (int x = 0; x < xsize; x++) {
				int col = spr.colidx[x][y];
				if (col != 0 && col != transcolor) {
					int tldist = findOutlineDist(spr, x, y, -1, -1, 5);
					int brdist = findOutlineDist(spr, x, y, 1, 1, 5);
					// System.err.println(" "+tldist+" "+brdist);
					// 0=brightest .. 4=darkest
					// 0 / 2 / 4
					int bright = 4;
					if (tldist < brdist * 2)
						bright = 3;
					if (tldist < brdist)
						bright = 2;
					if (tldist < brdist / 2)
						bright = 1;
					if (tldist == 1 && brdist > 1)
						bright = 2;
					if (tldist == 2 && brdist > 2)
						bright = -1;
					if (tldist == 3 && brdist > 2)
						bright = 0;
					// special cases: thin areas
					if (tldist == 1 && brdist == 2)
						bright = 1;
					if (tldist == 2 && brdist == 1)
						bright = 3;
					// if (brdist == 1 && bright <= 2) bright += 2;
					// if (brdist == 2 && bright <= 3) bright += 1;
					// any colour except black
					// colnr = (int)(2+ Math.random()*
					// (spr.coltable.length/3-2));
					if (bright >= 0) {
						boolean dither = (bright & 1) == 1
								&& ((x + y) & 1) == 1;
						bright = bright / 2 + (dither ? 1 : 0);
						spr.colidx[x][y] += bright;
					} else {
						if (((x + y) & 1) == 1)
							spr.colidx[x][y] = 5 * 3;
					}
				}
			}
		}
	}

	public int findOutlineDist(Sprite spr, int x, int y, int dx, int dy,
			int depth) {
		if (x < 0 || x >= xsize || y < 0 || y >= ysize)
			return 0;
		if (spr.pixels[x][y] >= 0 && spr.pixels[x][y] <= 5)
			return 0;
		if (depth <= 0)
			return 7;
		int xdist = findOutlineDist(spr, x + dx, y, dx, dy, depth - 1);
		int ydist = findOutlineDist(spr, x, y + dy, dx, dy, depth - 1);
		return xdist < ydist ? xdist + 1 : ydist + 1;
	}

	public void bevelShadeNew(Sprite spr) {
		// shade given colours
		for (int y = 0; y < ysize; y++) {
			for (int x = 0; x < xsize; x++) {
				int idx = spr.colidx[x][y];
				// if (idx >= 15) idx -= 3; // remove highlights
				if (idx >= 6) {
					int tldist = findOutlineDistNew(spr, x, y, -1, -1, 2);
					int brdist = findOutlineDistNew(spr, x, y, 1, 1, 2);
					// System.err.println(" "+tldist+" "+brdist);
					// 0=darkest ... 4=brightest. Odd numbers will dither.
					int bright = 2;
					// if (tldist == 2) bright = 4;
					if (tldist == 1)
						bright = 4;
					// if (brdist == 2) bright = 1;
					if (brdist == 1)
						bright = 0;
					// special cases: thin areas
					if (tldist == 1 && brdist == 1)
						bright = 2;
					boolean dither = (bright & 1) == 1 && ((x + y) & 1) == 1;
					// 0, 1, or 2
					bright = bright / 2 + (dither ? 1 : 0);
					if (bright == 2) {
						spr.colidx[x][y] = 15; // highlight
					} else {
						spr.colidx[x][y] = 3 * (idx / 3) + 2 - 2 * bright;
					}
				}
			}
		}
	}

	public int findOutlineDistNew(Sprite spr, int x, int y, int dx, int dy,
			int depth) {
		if (x < 0 || x >= xsize || y < 0 || y >= ysize)
			return 0;
		if (depth <= 0)
			return 0;
		if (spr.colidx[x][y] <= 5)
			return 0;
		int xdist = findOutlineDistNew(spr, x + dx, y, dx, dy, depth - 1);
		int ydist = findOutlineDistNew(spr, x, y + dy, dx, dy, depth - 1);
		return xdist < ydist ? xdist + 1 : ydist + 1;
	}

	public void gouraudShade(Sprite spr) {
		int cenx = xsize / 4 + (int) (Math.random() * 2.999);
		int ceny = ysize / 4 + (int) (Math.random() * 2.999);
		int maxdist = xsize - cenx - 1;
		int hlt_rx = (int) (Math.random() * 2.9999);
		int hlt_ry = (int) (Math.random() * 2.9999);
		int inner_r = 7 + (int) (Math.random() * 16);
		int outer_r = 7 + (int) (Math.random() * 16);
		for (int y = 0; y < ysize; y++) {
			int dy = Math.abs(y - ceny);
			for (int x = 0; x < xsize; x++) {
				int dx = Math.abs(x - cenx);
				int dd = dx * dx + dy * dy;
				int idx = spr.colidx[x][y];
				// if (idx==15) idx-=3;
				if (idx >= 6) {
					// 0=darkest .. 4=brightest. Odd numbers will dither.
					int bright = 2;
					if (dx <= hlt_rx && dy <= hlt_ry)
						bright = 4;
					else if (dd <= inner_r)
						bright = 3;
					else if (dd >= maxdist * maxdist - outer_r)
						bright = 0;
					else if (dd >= maxdist * maxdist - outer_r - 13)
						bright = 1;
					boolean dither = (bright & 1) == 1 && ((x + y) & 1) == 1;
					// 0, 1, or 2
					bright = bright / 2 + (dither ? 1 : 0);
					if (bright == 2) {
						spr.colidx[x][y] = 15; // highlight
					} else {
						spr.colidx[x][y] = 3 * (idx / 3) + 2 - 2 * bright;
					}
					// spr.colidx[x][y] = 3*(idx/3) + 2 - bright;
				}
			}
		}
	}

	public void animate(Sprite spr) {
		// now, animate if applicable
		if (animtable == null)
			return;
		// d = distance travelled. Pixels that travel the largest distance
		// should overwrite other pixels
		for (int d = 0; d <= 2; d++) {
			for (int y = 0; y < ysize; y++) {
				for (int x = 0; x < xsize; x++) {
					int col = spr.pixels[x][y];
					if (col == transcolor)
						continue;
					for (int a = 0; a < animtable.length; a++) {
						int anim = animtable[a][y][x];
						if ((anim + 7) / 8 != d)
							continue;
						int dx = 0, dy = 0, mul = 1;
						if (anim > 8) {
							mul = 2;
							anim -= 8;
						}
						if (anim == 8 || anim == 1 || anim == 2)
							dy = -1;
						if (anim == 2 || anim == 3 || anim == 4)
							dx = 1;
						if (anim == 4 || anim == 5 || anim == 6)
							dy = 1;
						if (anim == 6 || anim == 7 || anim == 8)
							dx = -1;
						dx *= mul;
						dy *= mul;
						// spr.pixels[(a+1)*xsize + x][y] = transcolor;
						if (x + dx >= 0 && x + dx < xsize && y + dy >= 0
								&& y + dy < ysize) {
							spr.pixels[(a + 1) * xsize + x + dx][y + dy] = col;
						}
					}
				}
			}
		}
	}
}
